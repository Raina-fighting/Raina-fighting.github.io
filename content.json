{"meta":{"title":"Raina","subtitle":"Nothing is impossible to a willing heart!","description":null,"author":"Yang Raina","url":"http://Raina-fighting.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-04-04T15:29:33.000Z","updated":"2019-08-08T08:52:03.371Z","comments":true,"path":"categories/index.html","permalink":"http://raina-fighting.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-04-04T08:10:55.000Z","updated":"2019-08-08T08:52:36.036Z","comments":true,"path":"tags/index.html","permalink":"http://raina-fighting.github.io/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2019-04-04T08:12:05.000Z","updated":"2019-08-08T03:02:08.462Z","comments":false,"path":"about/index.html","permalink":"http://raina-fighting.github.io/about/index.html","excerpt":"","text":"关于我From: CUFE中央财经大学Email: &#x31;&#56;&#x34;&#x30;&#x31;&#x36;&#56;&#56;&#51;&#51;&#x37;&#x40;&#x31;&#x36;&#x33;&#x2e;&#99;&#x6f;&#109; 土生土长的统计学习者，希望能丰富知识面，欢迎分享。"}],"posts":[{"title":"期刊数据抓取","slug":"期刊数据抓取","date":"2019-09-05T10:51:46.000Z","updated":"2019-09-10T03:45:48.615Z","comments":true,"path":"2019/09/05/期刊数据抓取/","link":"","permalink":"http://raina-fighting.github.io/2019/09/05/%E6%9C%9F%E5%88%8A%E6%95%B0%E6%8D%AE%E6%8A%93%E5%8F%96/","excerpt":"","text":"期刊数据爬取 本案例系同学共同成果，此部分仅限爬虫代码 《统计研究》于1984年创刊，月刊，是由中华人民共和国国家统计局主管、中国统计学会和中华人民共和国国家统计局统计科学研究所主办的学术性期刊。 从百度学术上爬取的数据包括了文章的标题、作者、被引量、发文时间、摘要、关键词几个部分 此数据可研究期刊热点演变、挖掘期刊关注主题或去探究作者的合作关系等，有兴趣的读者可留言探讨 12345678910'''加载模块'''import loggingimport requestsimport sysimport urllibimport pandas as pdimport numpy as npimport refrom bs4 import BeautifulSoupfrom collections import OrderedDict 123456page=np.arange(0,660,10)headers = &#123; 'User-Agent':'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36' &#125;cookies=&#123;\"cookies\":\"BAIDUID=2A8356C9A6AF44FECF9A91D6A7F8E5C2:FG=1; PSTM=1555385051; delPer=0; BIDUPSID=838C6450CB0F1BA9A29EE2F1C8A9B28F; BD_CK_SAM=1; H_PS_PSSID=; Hm_lvt_43172395c04763d0c12e2fae5ce63540=1557540625; PSINO=1; BDRCVFR[w2jhEs_Zudc]=mbxnW11j9Dfmh7GuZR8mvqV; BDSVRTM=183; Hm_lpvt_43172395c04763d0c12e2fae5ce63540=1557547102\"&#125;#headers和cookies查看个人使用的浏览器设置 123456789101112131415161718192021222324252627282930313233343536373839404142newsData = OrderedDict()for i in page: href='http://xueshu.baidu.com/s?wd=%E7%BB%9F%E8%AE%A1%E7%A0%94%E7%A9%B6&amp;pn='+str(i)+'&amp;tn=SE_baiduxueshu_c1gjeupa&amp;ie=utf-8&amp;usm=1&amp;sc_f_para=sc_tasktype%3D%7BfirstSimpleSearch%7D&amp;sc_hit=1' html = requests.get(href,headers=headers) soup = BeautifulSoup(html.content, 'html.parser') divs = soup.findAll('div', &#123;\"class\": \"sc_content\"&#125;) xueshu_href=\"http://xueshu.baidu.com\" for j in range(len(divs)): jilu=&#123;&#125; head = divs[j].findAll('h3',&#123;\"class\": \"t c_font\"&#125;)[0] #标题 titleinfo = head.find('a') title = titleinfo.get_text().strip().replace(\"\\n\", \"\") #网址 url = titleinfo['href'] url=xueshu_href+url url_cut=url.split(\"%\") q=url_cut[2][2:] url=\"http://xueshu.baidu.com/usercenter/paper/show?paperid=%s&amp;site=xueshu_se\"%q #作者 author=\"\" otherinfo = divs[j].find(\"div\",&#123;\"class\": \"sc_info\"&#125;) b = otherinfo.find(\"span\") result=b.findAll(\"a\") for p in result: author=author+p.get_text().strip().replace(\"\\n\", \"\")+\" \" #被引量 cite_cont=otherinfo.find(\"a\",&#123;\"class\":\"sc_cite_cont\"&#125;).get_text().strip().replace(\"\\n\", \"\") #发表时间 time=otherinfo.find(\"span\",&#123;\"class\":\"sc_time\"&#125;).get_text().strip().replace(\"\\n\", \"\") jilu[\"link\"]=url jilu[\"time\"]=time jilu[\"title\"]=title jilu[\"author\"]=author jilu[\"cite\"]=cite_cont if(i&gt;0): newsData[i+j-1] = jilu else: newsData[i+j] = jiludata=pd.DataFrame.from_dict(newsData).Torder = [\"title\",\"author\",\"cite\",\"time\",\"link\"]data=data[order] 1234567891011121314151617181920212223'''进详情页获取摘要和关键词'''n=len(data)keyWords=[]Abstract=[]for i in range(n): url=data.iloc[i][\"link\"] html = requests.get(url,headers=headers) soup = BeautifulSoup(html.content, 'html.parser') #摘要和关键词 if(soup.find('p', &#123;\"class\": \"abstract\"&#125;)==None): Abstract.append(\"无\") keyWords.append(\"无\") else: abstract = soup.find('p', &#123;\"class\": \"abstract\"&#125;).get_text().strip().replace(\"\\n\", \"\") Abstract.append(abstract) aa=soup.find('p', &#123;\"class\": \"kw_main\"&#125;) bb=aa.findAll(\"span\") keywords=\"\" for i in bb: keywords+=i.get_text()+\" \" keyWords.append(keywords)data[\"abstract\"]=Abstractdata[\"keywords\"]=keyWords","categories":[{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/categories/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"},{"name":"爬虫","slug":"文本分析/爬虫","permalink":"http://raina-fighting.github.io/categories/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"python","slug":"python","permalink":"http://raina-fighting.github.io/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"http://raina-fighting.github.io/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"基于新闻联播的文本数据分析","slug":"基于新闻联播的文本数据分析","date":"2019-09-04T10:51:00.000Z","updated":"2019-09-10T08:35:24.731Z","comments":true,"path":"2019/09/04/基于新闻联播的文本数据分析/","link":"","permalink":"http://raina-fighting.github.io/2019/09/04/%E5%9F%BA%E4%BA%8E%E6%96%B0%E9%97%BB%E8%81%94%E6%92%AD%E7%9A%84%E6%96%87%E6%9C%AC%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/","excerpt":"","text":"基于新闻联播的文本数据分析 本案例系中央财经大学应美玲友情提供 一、研究背景与意义有一档节目，在中国几乎无人不知，无人不晓，它就是CCTV的《新闻联播》。自1978年1月1日开始，《新闻联播》每天晚上七点准时在中央电视台及各省级电视台同步播出，时长为30分钟。这档新闻节目聚焦于政治、经济、科技、军事、外交、文化等主题，准确地给全国观众报道最新最及时的新闻。1982年，中央政府更是明文规定了重要的新闻必须在《新闻联播》中首先播出，这一规定揭示了《新闻联播》的重要地位。该节目宗旨为“宣传党和政府的声音，传播天下大事”。 该档节目播出至今已经有四十余年的历史，它已经深入的渗透到了人们的生活中，甚至改变了人们的生活方式。通过观看《新闻联播》，我们可以了解到国家最新出台的政策，可以对当前国家经济形势有一个大致的了解，可以真正做到足不出户便已了解国家大事。《新闻联播》已经成为一个风向标和指明灯，它给老百姓们的生活带来了方向：对于投资者来说，观看《新闻联播》有助于他们敏锐的发现各种投资机会；对于大学生来说，观看《新闻联播》可以帮助他们明晰行业的发展情况，从而有助于做出就业的选择；对于政府官员来说，《新闻联播》在很大程度上明确了他们未来的工作方向，若提前得知并做好充足准备，有助于他们的政绩表现并提高晋升的概率；甚至对于外国友人或者外企来说，想要深入了解中国，《新闻联播》是必不可少的了解渠道之一。 由此可以看到，《新闻联播》对于我们所有人来说价值都是巨大的，它与我们的切身利益息息相关，密不可分。但是，却很少有人去真正研究该档新闻节目，我认为其中主要有以下两方面原因：第一，因为《新闻联播》每天都会准时播出，人们已经司空见惯习以为常，反倒忽略了其中巨大的价值，就像空气对于人类的作用一样；第二，《新闻联播》是以文本数据的形式存在，不像传统的数值数据，方便统计分析和数学建模。 二、样本选取与数据来源本文所使用的新闻联播文本数据来自于Tushare金融大数据社区 1，获取了2006年6月15日至2019年7月2日的全部新闻联播文本数据，一共有77561条观测。每一天平均有10至25条不等的新闻。每一条观测有三列，分别是日期（date）、标题（title）和内容（content）。例如，表1是本文样本数据集中的两条观测。本文主要是对content的文本数据进行分析。 表 1 部分样本数据 三、数据描述性分析由于文本数据没有具体的数值，所以只能通过Python对新闻联播文本数据进行分词，然后做词频统计。利用得到的词频表进行后续一系列的描述分析，从而将新闻联播的文本数据转为可视化的图表。 （一）新闻联播词云图 图 1 新闻联播词云图 从图1中可以看到，《新闻联播》中最经常提到的词语是发展、中国、经济、合作、习近平、建设、企业、美国、文化等，这些高频词语的出现也正好契合了《新闻联播》的主旨——即聚焦于国内经济发展建设、外交、文化等方面。 （二）各省份受关注情况通常情况下，某个省份越受到中央政府的重视和关注，那么它在新闻联播中被提及的次数就越多。基于这样的规律，在统计各个省份和直辖市的词频分布之后，绘制了整体情况下的各省份在新闻联播中出现的频数柱状图和某些省份被提及频数随着时间的变化图，如图2至图12所示。 图 2 各省份被提及频数柱状图 从图2中可以看到，从2006年至2019年这14年时间里，上海被提到的次数最多，超过了一万次；其次是香港和北京，分别被提到了7200次和6640次。这三个城市在中国的地位也是相当重要的：北京是中国的首都；上海是著名的金融中心；香港则是重要的外汇交易中心和人民币离岸交易中心。被提到次数最少的三个省份分别是山西、青海和宁夏，可以认为这三个省份得到的关注相对较少。 图 3 上海被提及频数的时间分布图 图 4 北京被提及频数的时间分布图 上海和北京都是中国最重要的两个城市。从图3中可以看到，每年上海被提及的次数都在500次以上，期间在2010年达到峰值，这是因为2010年在上海举行了世博会。从图5中看到，2006年至2008年，北京被提到的次数逐年增多，并在2008年达到峰值，这是因为2008年北京成功举办了奥运会；但是2008年之后，北京被提到的次数逐年下降，但平均值也在300次左右。 图 5 内蒙古被提及频数的时间分布图 内蒙古作为中国的一个自治区，主要生活着蒙古族的人民群众。从图5中可以看到，2007年和2017年内蒙古被提到的次数达到了两个峰值，这主要是对应着内蒙古自治区成立的60和70周年。 图 6 香港被提及频数的时间分布图 图 7 澳门被提及频数的时间分布图 图 8 台湾被提及频数的时间分布图 香港、澳门和台湾作为曾经的殖民地，回归祖国后自然受到中央政府的许多关注。从图6中可以看到，2007年和2017年香港出现在新闻联播的次数达到峰值，其中2007年香港被提到的次数多达1513次，这是因为2007年和2017年分别是香港回归祖国的十周年和二十周年。从2007年提及香港1513次，可以看出我国对回归后的香港十分重视，以及对香港回归喜悦之极。澳门的情况也是类似的，图7中2009年和2014年分别对应着澳门回归祖国的十周年和十五周年，这两年新闻联播提及澳门的次数也达到了平时的两倍。图8中台湾在2007年和2009年被新闻联播提到的次数比较多，这是因为在这两个时间段内，台湾的政局比较动荡。一直以来，台湾问题就比较具有政治敏感性，作为官方媒体的新闻联播自然对台湾岛保持着较高的关注度。 图 9 四川被提及频数的时间分布图 图 10 青海被提及频数的时间分布图 四川省和青海省在历史上都曾经发过地震。从图9中可以看到，2008年5月12日汶川发生8.0级地震，于是2008年四川省被新闻联播提及1552次；2010年4月14日青海玉树发生7.1级地震，当年新闻联播提及到青海374次。从图9和图10中可以看到，中央政府对地震灾区是及其关注和重视的，尤其是汶川地震，因为汶川地震是中国人民共和国成立以来最严重的一次地震。在汶川地震后的几年里，中央政府一直致力于灾后重建，从2009年到2014年四川省一直保持着较高的提及频率便可以看出来。结合图1来看，从2006年-2019年，四川总体上被提到的次数仅低于上海香港和北京。现如今，四川省会成都市已经成功跻身新一线城市，可见汶川地震带给四川的影响在中央政府的努力下已经消失殆尽。 图 11 新疆被提及频数的时间分布图 图 12 西藏被提及频数的时间分布图 新疆和西藏是我国五个自治区之二，主要生活着维吾尔族和藏族人民。新疆自治区于1955年成立，西藏自治区则于1965年成立。2015年分别对应着自治区成立的60和50周年，所以被新闻联播提到的次数达到了一个小高峰。从图11中可以看到，2009年新疆被提到了843次，这是因为当年新疆发生了极其严重的震惊全国的犯罪事件。图12中显示着2009年西藏被提到了985次，这是因为当年确定了西藏百万农奴解放纪念日。 （三）中国外交情况 图 13 各国被提及的百分比 外交一直是新闻联播的一个重要板块。通过词频分布，我们可以了解到中国和哪些国家往来密切。从图13中可以看到，新闻联播里提到美国的占比最多，达到22.81%。这说明我国还是十分重视中美关系，因为中国和美国一个是人口大国，一个是高度发达的超级强国，两个国家之间已经深深地利益相关。除此之外，中国和俄罗斯、日本的联系也十分的密切。叙利亚和伊朗因为战乱长期动荡不安，引起了我国的关注。 （四）各高校被提及情况 图 14 各高校被提及的百分比 通过统计新闻联播中提到的各高校的次数，可以总结出我国比较重视的一些高校，从而可以给刚高考完的学生填志愿提供一定的依据。从图14中可以看到，清华北大被提到的占比和为41.07%，这说明我国最顶尖的两所学府，受到中央非一般的重视。中国人民大学、北京师范大学和复旦大学紧随其后。一个很明显的现象是，在图14中，几乎所有的大学都是理工类或综合类，只有中国政法大学一个例外。这也说明了中央政府对综合类和理工类的高校的重视程度要远高于偏文科类的高校。 （五）新闻热词分布情况 图 15 一带一路分布情况 ​ 自从习近平主席在2013年提出“新丝绸之路经济带”后，“一带一路”这个词的热度便一直高居不下。从图15中可以看到，2017年“一带一路”这个词被提到了1463次，虽然后续呈下降趋势，但仍然保持着超高的提及频率。这也表明政府对“一带一路”建设高度重视。 图 16 5G分布情况 从图16中可以看到，5G这个词语在2014年开始出现，但是一直到2018年，5G被提到的次数都十分的少。然而在2019年，5G出现的次数却有了一个质的飞跃，从31次迅速上升到147次。这是因为2019年华为宣布掌握了5G技术。这一消息迅速引起了政府的注意，可见我国对科技的重视程度。根据图16可以合理的预测，在未来的几年里，5G将会变得越来越重要。 图 17 转型、升级分布情况 图 18 创新、改革分布情况 从图17、18中可以看到，自从党的十八大之后，经济转型、行业升级、改革创新这些词在新闻联播中被提起的越来越频繁，其中都纷纷在2016年达到了最高点。党中央提出经济新常态，只有对经济转型，对行业升级，对科技改革创新才能达到这一目标。 （六）中国宏观经济情况 图 19 三大产业被提及情况 从图19中可以看到，新闻中提到农业的次数远远高于工业和服务业，这说明中央政府还是最关注农业的发展情况，这也和目前的国情相符，当下中国还是以第一产业为主。在2012年之前，农业和工业存在着一个此消彼长的负相关关系，这可能是因为年轻人纷纷选择外出务工而非务农，使得工业增长而农业下降；2012年之后，工业和农业呈现同增同长的关系，这可能是因为工业的发展也提高了农业的效率，从而间接促进农业的发展。 图 20 投资、消费、出口被提及情况 投资、消费和出口被称为拉动经济增长的三驾马车。从图20中看到，投资一直以来都是我国经济增长的主要因素，期间虽然不停的起伏震荡，但中央仍给予了足够的重视。在2009年，全世界遭受金融危机时，我国开始强调消费、内需来拉动经济的增长。三驾马车的格局已经从2006年的投资、出口、消费转变为2019年的投资、消费、出口。","categories":[{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/categories/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"}],"tags":[{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/tags/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"},{"name":"可视化","slug":"可视化","permalink":"http://raina-fighting.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"}]},{"title":"世界银行借贷款情况分析","slug":"世界银行借贷款情况分析","date":"2019-09-03T02:22:17.000Z","updated":"2019-09-09T11:45:23.285Z","comments":true,"path":"2019/09/03/世界银行借贷款情况分析/","link":"","permalink":"http://raina-fighting.github.io/2019/09/03/%E4%B8%96%E7%95%8C%E9%93%B6%E8%A1%8C%E5%80%9F%E8%B4%B7%E6%AC%BE%E6%83%85%E5%86%B5%E5%88%86%E6%9E%90/","excerpt":"","text":"世界银行借贷款情况分析 本案例得到中央财经大学周萌和姚沛君友情支援 本次案例从宏观至微观对数据集中的重要信息进行分析：首先从宏观层面对全球各个地区的借贷款情况及其资金投入方向进行考察，随后选取中国作为分析对象，对本国贷款项目资金来源于主要用途进行分析，最后选取国内贷款资金耗费量最大的汶川震后重建项目进行分析。 全球借贷款情况分析 各地区的不同贷款项数目差异情况 其中经济发展水平较高的拉丁美洲加勒比地区、欧洲与中亚地区申请贷款项目中涉及公共管理以及法律相关的数目较多；反之，经济发展水平较低的非洲地区以及中东地区所涉及到的农林业相关项目数量较多；南亚地区在教育方面的项目数量占其总申请项目数目的比值要远远高于其他国家与地区，非洲以及东亚地区各类项目数量占比较为均衡。 图1.1 不同地区项目主要部门（sector）购买次数占比情况 对比各地的各个项目采购数目，其中拉丁美洲与加勒比地区签署的项目最多，非洲的项目数量位居第二，项目最少的为中东地区南非地区。 图1.2 不同地区项目主要部门（sector）购买次数绝对值情况 不同地区的采购目录（Procurement Category）购买数量呈现差异性 观察不同地区采购目录可以反应不同地区贷款资金的流向，可以观察到各个地区购买数量最多的均为咨询类服务，所涉及的咨询类服务包括管理建议、投标文件协助、知识产权转移、教育类服务、软件类服务、统计类服务以及安保服务等接近30项服务，可以看出随着经济社会的进一步发展，社会形态变得越来越复杂，对于不同咨询类服务的需求日益增长，成为一个国家与地区发展过程中不容忽视的一项内容。各地区购买数量位居第二的为各类商品，商品经济的繁荣，使得商品的进出口成为一个国家不可或缺的经济组成部分。除此之外的土木工建以及非咨询类项目支出均占比较小，且总金额数目也较少。 图1.3 不同地区采购目录购买数量占比情况 图1.4.1 不同地区采购目录购买数量绝对值情况 除此之外，采购方法上（Procurement Method）也存在着一定的差异，其中数量排名位居前三位的分别为工业、资源、以及互联网项目投标，从中也可以反应目前世界银行签署的贷款项目侧重投资的几大方面：第二产业的发展仍然是众多贷款申请国家注重的方面。与此同时，各国的能源以及资源问题也受到普遍关注。随着互联网时代的高速发展，互联网相关产业的投入也是必不可少的。 图1.4.2购买项目方式数量差异情况 不同区域接受贷款所涉及的项目主要部门（Major Sector）差异情况 具体查看不同地区贷款所涉及的项目主要部门，观察到不同地区的资金投资结构呈现差异性，其中东亚、中东以及北非地区资金投资结构较为相似，对于交通、用水以及能源的投资较多；欧洲、中亚以及南亚的投资结构较为相似，都在能源方面投资最多，除了对于交通以及用水的投入，还增加了对于法律方面的投资。非洲地区整体的投资结构与其他地区呈现明显的差异，其在各个方面的投资都出于一个较高水平，不像其他区域都只在一个或两个项目上有比较大的投资，尤其是在通信以及用水方面的投资明显高于其他地区，这也是由于非洲地区经济发展各个方面都较为落后，很多基础配套设施亟待更新换代，社会问题较为复杂，相比于欧洲、北美等发达国家占据的地区，非洲在各个方面都需要大量资金的投入都比较大。 图1.5 不同区域的项目主要部门（Major Sector）金额差异情况 不同区域采购目录（Procurement Category）金额差异情况 不同地区购买的商品或服务类型呈现出与项目主要部门投资类似的结构特点，相对于其他经济、社会发展较为完善的地区，投资方向趋向单一化，体现出重点，而非洲由于整体出于较为落后的水平，因此对于各类别的服务都投入了较大的资金，尤其是在咨询类服务中投入的资金最多。 进一步对比采购项目的数量与所花费金额：总体上各个地区咨询类项目购买的次数最多，但除去非洲地区，其余国家所需要资金最多的均为土建项目。土建项目本身需要大量的资金投入，虽然涉及到的项目数量并不多，但需要的贷款金额是巨大的，相比之下，咨询类服务项目繁多并且部分涉及知识产权类的服务，这部分服务涉及经济、社会发展的各个方面，因此需求量较大，但每一笔需要的金额相比于土建项目要小得多。 图1.6 不同地区采购项目金额差异情况 供给国（Supplier Country）投资差异情况 选取提供贷款金额最多的前十个国家，观察得到这些国家提供的服务类型呈现差异性，其中越南提供的服务次数总和最多，超过200次，涉及最多的项目是能源与采矿方面的服务；提供服务数目总和位居第二的为巴西，主要同农林、健康以及社会服务类投资；萨尔瓦多与危地马拉主要提供公共管理、法律等方面的服务；中国则主要提供用水、环保等方面的服务。 图1.7 提供贷款金额排名前十国家投资差异情况 贷款总金额时间序列分析 观察 2015 年世界银行的有关项目，签订合同金额随签署时间变化的情况，可以发现合同金额大都集中在100,000,000 美元以下，其中最高金额签订于2014 年 7 月 24 日，关于在非洲建设区域通信基础设施项目，该项目服务区域较广，且通信材料较为昂贵，在项目初期投入较多是可以理解的。另外，大多数项目签订在 2014 年后半年及 2015 年，其中 12 月份总金额最高，而 2013 年及之前签订的合同数不足 1%，属于长期执行的项目工程只有少数。结合分面图，12 月份签订的合同总金额在当年之中相对较高，可能与部门运作情况相关，年底的一些项目可能结束考察步入执行。 图1.8 2010-2015年贷款总金额变动情况 借款国与供应国地域分布 观察全球范围内贷款申请国的分布情况，可以明显观察到贷款金额较高的国家集中分布在非洲，这与非洲现实的经济发展水平是密切相关的，相对落后的生产发展水平使得非洲各国急需依靠世界银行二点贷款来进行大量的投资与建设活动；另外中国作为发展中国家的代表，贷款总金额也较高，这一系列现象也侧面反应了世界银行设立贷款项目额初衷，即为帮助发展落后以及各发展中国家实现反贫穷的政策，推动全球经济的健康发展。 图1.9.1 贷款申请国分布情况 注：图1.9.1与1.9.2为采用Echart绘制的交互式地图 在贷款供应国中，中国的所提供的贷款总金额远高于世界其他国家地区，并且对应上图中中国贷款数目大小，可以得知中国所申请的贷款项目一部分用于本国的投资建设活动，可见随着中国经济的发展、综合国力的进一步提升，中国在世界银行中占有重要地位，在注重自身经济发展的同时，也着重于在世界其他国家进行投资建设活动。 图1.9.2 贷款供应国分布情况 中国借贷款情况分析 中国2009-2015年获得贷款情况 观察中国2009-2015年在世界银行的总贷款金额变动曲线，可以发现其中2009年贷款金额最高，总额超过16亿美元。当年贷款资金投建的项目共涉及63项，其中安徽省公路修复改造工程、福州南台岛城市发展项目、福建公路部门投资、贵阳交通工程四项投资均超过100万美元，金额总和占当年总投资的45.4%。 2010-2014年各年贷款金额基本在10亿美元的规模上浮动，在2015年贷款金额出现大幅缩减，仅有4亿美元，该年截止日期前共涉及57个项目，投资金额最高的为昆明城市轨道交通项目。 图2.1 中国2009-2015年在世界银行的总贷款金额变动曲线 中国贷款金额排名前十的项目 2009-2015年中，筛选投资总金额排名前10的项目，可以观察到投资金额最高的为汶川灾后重建项目，接下来依次为南光铁路项目、宁夏公路工程、安徽省公路修复改造工程、贵阳广州铁路工程、南昌城市轨道交通项目、福州南台岛城市发展项目、湖北宜巴高速公路、福建公路部门投资、石正铁路项目。其中，灾后重建项目本身十分重大，历时较长、规模较大、投资需求量不可避免地高于一般性项目，除此之外，投资金额较高的均为道路交通方面地建设项目，这与近些年来，我国的公路交通发展迅速的现实情况相符，其中高铁发展技术位居世界前列。 图2.2 中国贷款金额排名前十项目总金额 中国贷款项目涉及项目主要部门（Major Sector）变动情况 观察2009-2015年各年的贷款项目类别，可以体现当年投资着重点所在，体现近几年来国家发展重心以及方向所在。可以观察到各年中用于交通以及用水的贷款项目占比最大，尤其是交通方面的投入在近些年来一直是最高的。而娱乐项目在2009-2014年中的各年占比呈现下降的趋势，并在2015年有所“回温”。相比之下，农业、财政、健康、工业、教育、以及法律等相关项目的各年投资占比均较小，可以看出近些年来中国各类项目投资组合结构并没有发生重大变化，仍然以交通设施建设为投资重心，并兼顾其他各项均衡发展。 图2.3 2009-2015年中国贷款项目涉及主要部门变动情况 国外对中国提供贷款资金情况 中国各项贷款资金来源主要分为本国资金与国外资金，其中国外资金（含中国香港特别行政区）共计约1540万美元，占贷款总金额的2.0%，其余资金均来自中国在世界银行的认股资金。为中国提供贷款的其余国家共有包括德国在内的14个国家，其中德国提供的贷款金额最高，澳大利亚与加拿大分别位居第二、第三。 图2.4 国外对中国提供贷款资金情况 重要国外贷款资金来源分析 关注提供贷款金额排名前五的国家所投入资金的具体流向，可以观察到一些国家所提供的投资项目比较单一，例如澳大利亚、德国两国几乎全部投资都用于交通建设，新加坡的投资也主要集中在工业以及交通，反之，以加拿大与美国为代表的国家投资项目较为多样化，涉及娱乐、财政、健康、用水等各个方面，但两国对于个项的投资额均较小。值得注意的是，国外投资项目中都没有涉及教育相关项目，我国的教育投资来源还是主要依靠本国的大量投资。 图2.5 提供贷款金额排名前五的国家投资情况 汶川重建项目分析2008年5月12日的汶川大地震牵动着全中国以至于全世界人们的心，灾后重建工作也受到了各方的高度重视。在2015年度，中国世界银行中的贷款项目共涉及136项，其中用于汶川灾后重建的共有15项目，总金额占比最大。该部分重点分析用于汶川灾后重建贷款的相关信息。 2009-2015年汶川重建项目贷款金额变动 下图显示了2009年至2015年中国用于汶川灾后重建的世界银行贷款总金额变动情况。前期的灾后重建需要大量的资金投入，因此可以观察到2009年至2011年贷款金额呈现急剧增长的趋势，并于2011年达到最高金额2亿美元，随后随着灾后重建的逐步完善，资金投入的需求逐渐下降，贷款金额也逐年减少，2014年与2015年两年贷款金额基本持平。 图3.1 2009-2015年汶川重建项目贷款金额变动情况 其他国家提供贷款情况 中国2009年至2015年用于汶川灾后重建的世界银行贷款资金来源主要分为本国资金与国外资金。其中国外资金约104万美元，占总贷款金额的2.8%。如下图所示，所涉及到的三个借款国家分别为巴西、加拿大以及美国，其中巴西借款金额最高，共计600万美元，美国次之，加拿大金额最小。 图3.2 其他国家提取贷款情况 汶川重建贷款涉及主要部门 世界银行拨付贷款的项目主要部门也可以反应汶川灾后重建项目的贷款后期走向。由于灾后道路运输系统受到严重毁坏，因此在道路运输新建项目中需要大量资金投入，可以观察到用于交通建设的贷款金额占比最多；用于健康以及用水方面的资金差异不大，每项金额约占交通运输项目金额的一半。用于教育的资金最少，相对于其余三个项目，可见教育的灾后重建对于资金的需求并没有其余三项大。 图3.3 汶川重建项目各部门资金分配情况 下图反应灾后贷款中各项目出现的次数，其中涉及健康的项目最多，交通与用水方面的项目次数次之，教育类项目次数最少。对比四个项目的资金以及项目次数分配情况可以观察到教育交通这两项的特点较为鲜明：交通类项目数量较少，但每笔需要的资金投入量较大，因此总金额最高，反之，健康类项目数量较多，需求量较大，但每一个项目的投入不及道路运输的大额投资，因此总金额较少。相比之下，教育类项目不论在数目还是金额上都占比最少。 图3.4 汶川重建贷款各部门项目个数 2009-2015年贷款主要部门资金分配变动情况 2009年至2015年各年四个项目的各年占比情况如下图所示，可以观察到灾后第一年中，基本生活资源亟待保障，因此2009年的贷款资金基本全部投入到用水项目当中，另外灾区的保障也十分重要，在灾后的头三年中，健康项目的资金投入占比较大，随着时间推移，健康问题得到了显著改善因此在这一项中的投入也逐渐减少。教育项目的投入在前期投入较大，正常运营之后的投入较少了。在解决了灾后的基本生活问题之后，道路运输系统的投资占比逐年增大，在后期远远超过其余三个项目的资金投入。 图3.5 2009-2015年各部门项目计数情况 从各年的不同项目投入资金数目也可以观察到各项目的运作特点，相对于其余三项，交通项目的重建体现了其资金需求量大、筹建周期较长的特点。 图3.6 2009-2015年各部门资金分配情况","categories":[{"name":"结构化数据","slug":"结构化数据","permalink":"http://raina-fighting.github.io/categories/%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"R","slug":"R","permalink":"http://raina-fighting.github.io/tags/R/"},{"name":"可视化","slug":"可视化","permalink":"http://raina-fighting.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"}]},{"title":"英超球员进球数影响因素分析","slug":"英超球员进球数影响因素分析","date":"2019-09-02T10:51:00.000Z","updated":"2019-09-09T09:33:12.133Z","comments":true,"path":"2019/09/02/英超球员进球数影响因素分析/","link":"","permalink":"http://raina-fighting.github.io/2019/09/02/%E8%8B%B1%E8%B6%85%E7%90%83%E5%91%98%E8%BF%9B%E7%90%83%E6%95%B0%E5%BD%B1%E5%93%8D%E5%9B%A0%E7%B4%A0%E5%88%86%E6%9E%90/","excerpt":"","text":"英超球员进球数影响因素分析 ## 一、背景介绍 2018世界杯闭幕不久，引起全民足球热潮。英格兰足球超级联盟简称英超，是英格兰足球总会属下的职业足球联赛，欧洲五大联赛之一，由20支球队组成。英超凭借快节奏、竞争激烈、强队众多，成为世界上最受欢迎的体育赛事。本案例通过分析英超球员基本信息和球场表现的情况，找到影响其进球数的因素进行建模。 二、数据来源与说明本案例使用数据为2012到2013赛季的英超赛事数据。数据集包含16支球队的166名球员在此赛季的场上表现和下个赛季的进球数。数据说明表见表1。 表1：英超数据说明表 ![png](英超球员进球数影响因素分析/image001.png) 三、探索性分析（一）因变量分析1.进球数分布 如图1，下个赛季即2013-2014赛季贡献了500个进球。其中，大部分球员进球数较少甚至为0，只有个别球员能力较强球队中担当突出，进球机会多进球数多。其中，苏亚雷斯达到31个，斯图里奇为21个，亚亚·图雷紧随其后20个。 图1：下一赛季进球数分布条形图 2.进球数与场上位置 本案例166名球中有86名中场，50名后卫，30名前锋球员。在2012-2013赛季共贡献了624个进球。其中，前锋的人均进球数和最大进球数最高，30名前锋共同贡献了264个进球，占42.3%。进球数最高的前锋是曼联的范佩西；最高的中锋是阿斯顿维拉的本特克。 图2：本赛季各场上位置进球数 3.进球数与年龄段 足球是高对抗项目，对运动员身体素质要求较高，从数据集中可知，运动员年龄分布在20-40之间，而高于35岁的只有两名球员。结合图3，年龄段在25-30之间的球员进球数最高，其中一半的前锋球员处在这个年龄段，该年龄段属于前锋球员创造价值的最佳阶段。30-40年龄段平均进球数最高，其中中场的贡献最高，30-40岁是中场球员蓄积经验后的成熟时期。 图3：不同年龄段进球数 4.本赛季与下赛季进球数 ​ 球员在连续的赛季中的表现是很相似的，如图4，本赛季进球数多的球员在下一个赛季同样表现优秀。如利物浦的苏亚雷斯。但也有少数球员两个赛季表现存在较大差异，如范佩西，本赛季进球最多，下个赛季缩减到一半以下。范佩西年龄为30，在球员中已经属于比较高的，更是30岁及以上仍在打前锋的少数球员之一。此外，也可以看出，前锋位置对进球数平均贡献最大。 图4：球员下一赛季与本赛季进球数的相关图 ### （二）变量相关性分析 选择与运动员场上表现，分为射门、亮点、犯规表现，相关的22个指标，相关系数矩阵图如图5。部分变量间存在较强的相关性，且变量间可能存在一些结构性特征。 图5：相关系数矩阵图 1234567891011121314151617181920212223242526##探索性分析#进球数分布summary(mdata$下一年进球)barplot(table(mdata$下一年进球),ylab=\"下一年进球\",col=\"lightblue\",main=\"\")#场上位置与总进球数library(ggplot2)ggplot(mdata,aes(x=factor(位置),y=进球))+ geom_bar(stat=\"identity\",fill=\"lightblue\")+ xlab(\"位置\")+ylab(\"本赛季总进球数\")#年龄与总进球数mdata$年龄分段=cut(mdata$年龄,c(19,25,30,40))# 48 84 34 ggplot(mdata,aes(x=年龄分段,fill=位置,y=进球))+theme_bw()+ theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+ geom_bar(stat=\"identity\")+ xlab(\"年龄分段\")+ylab(\"本赛季总进球数\")#本赛季与下赛季进球数ggplot(mdata,aes(x=进球,y=下一年进球,colour=位置))+geom_point(size=2.5)+theme_bw()+ theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())+ annotate(\"text\",x=23,y=31,label=\"苏亚雷斯\")+ annotate(\"text\",x=26,y=12,label=\"范佩西\")#变量相关性分析mdata1&lt;-mdata[10:33]mdata2&lt;-mdata1[,-c(11,23)]library(corrplot) M=cor(mdata2)corrplot(M,type=\"lower\",tl.pos=\"b\",tl.cex=0.7,tl.col = \"black\") 四、模型建立（一）建模思路本案例考察22个影响因素对因变量下一个赛季进球数的影响，由于变量数目较多，部分变量间存在较强的相关关系，所以首先对变量降维。变量间存在某一些结构性特征，希望能寻求反映某方面信息的一组公共潜在因素。最终选择因子分析对数据首先进行降维。 （二）因子分析本案例首先对所有22个变量提取3个公因子，发现因子旋转后因子载荷矩阵中，变量红牌和乌龙球在公因子上的区分度较差，同时从相关系数矩阵也可以发现这两个变量与其他变量的相关性比较弱，与下一年进球数的相关系数分别为-0.001,0.033，影响程度很小，考虑删除这两个变量做分析。 对20个变量做因子分析，碎石图6显示，前四个主因子的特征根大于平行分析的结果，结合特质根大于1，选择三个主因子。经过因子旋转后，三个公因子特征根均大于1，合计可以解释60%的变差。载荷矩阵见表2，其中隐去了小值系数。 图6：公共因子碎石图 表2：因子分析结果汇总表 ![png](英超球员进球数影响因素分析/image0021.png) 由表2载荷矩阵可知，公因子1表示进攻因子，反映球员辅助进攻及射门技能；公因子2表示后卫因子，辅助解围维控全场格局争取有利优势；公因子3表示防守因子，与中场传球拦截相关。共同度大都在0.4以上，三个公因子对各个变量的解释程度较好。 根据因子得分分别找出在三个因子上得分最高的10名球员，如表3。其中，进攻力较强的大多是前锋，后卫力较强的都是后卫，防守力较强的大多是中场。与不同位置球员功能相关，符合认知。 表3：各因子表现较好的球员 ![png](英超球员进球数影响因素分析/image0023.png) （三）回归分析本案例中要预测的因变量是下一赛季进球数，球员的进球数可以认为服从泊松分布。建立泊松回归模型： log(下一年进球数)~位置+年龄+进攻因子+后卫因子+防守因子 模型中使用的自变量有球员位置、球员年龄分段、上述三个因子。模型的偏差为489.18，空模型的偏差为901.07，可以认为模型是显著的。其中，前锋位置相比后卫可以提升进球数，中场提升幅度相比较小。球员的年龄段在25-30之间能力最强，球场上贡献的进球数最多。另外三个主因子中，进攻因子和防守因子对进球数都有正的影响，进球更多地会发生在球员进攻射门、传球带球的场合下，相比而言后卫的功能更多是防守解围，进球机会相对比较小。 表4：回归系数结果表 ![png](英超球员进球数影响因素分析/image004.png) 1234567891011121314151617181920212223##因子分析#因子数量的选择library(psych)fa.parallel(scale(mdata2),fa=\"fa\",main=\"碎石图\")#估计因子载荷fa1=fa(mdata2,nfactors=3,rotate='none',fm='pa');fa1fa2=fa(mdata2,nfactors=3,rotate=\"varimax\",fm=\"pa\");fa2 #0.54mdata3&lt;-mdata2[,-c(7,22)]dim(mdata3)fa.parallel(scale(mdata3),fa=\"fa\",main=\"碎石图\")fa3=fa(mdata3,nfactors=3,rotate=\"varimax\",fm=\"pa\");fa3#计算因子得分mdata$scores1&lt;-fa3$scores[,1]#公因子1得分mdata$scores2&lt;-fa3$scores[,2]#公因子2得分mdata$scores3&lt;-fa3$scores[,3]#公因子3得分head(mdata[order(mdata$scores1,decreasing = T),c(1,5)],10)##进攻能力前6head(mdata[order(mdata$scores2,decreasing = T),c(1,5)],10)##解围能力前6head(mdata[order(mdata$scores3,decreasing = T),c(1,5)],10)##防守能力前6#回归分析fit &lt;- glm(下一年进球~位置+年龄分段+scores1+scores2+scores3, family=poisson(link=log), data=mdata)summary(fit)step(fit)anova(glm(下一年进球~1, family=poisson(link=log), data=mdata),fit) 五、结论本案例分析了英超联盟16只球队166名球员在2012-2013的表现情况，并选择合适的变量对下一赛季的进球数做预测。可以发现，球员位置和球员年龄段是影响进球数的两个自身因素。一般地，处于前锋位置的球员，承担进攻和射门任务，有更多进球机会，进球均值高；年龄段在25-30之间的球员，拥有一定的比赛经验，自身能力和身体素质处于最优状态，更容易在球场上进球。关于球员在球场上的表现，本案例使用因子分析，从20个因素中选取3个主因子，分别表示进攻因子，后卫因子，防守因子，三个因子对进球数都有显著的影响，其中进攻力和防守力呈正相关，后卫力更多地与球员的防守解围相关联，进球机会较少，相比对进球数有负的影响。 获取数据可留言笔者","categories":[{"name":"结构化数据","slug":"结构化数据","permalink":"http://raina-fighting.github.io/categories/%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/"}],"tags":[{"name":"R","slug":"R","permalink":"http://raina-fighting.github.io/tags/R/"},{"name":"可视化","slug":"可视化","permalink":"http://raina-fighting.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"回归分析","slug":"回归分析","permalink":"http://raina-fighting.github.io/tags/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"},{"name":"因子分析","slug":"因子分析","permalink":"http://raina-fighting.github.io/tags/%E5%9B%A0%E5%AD%90%E5%88%86%E6%9E%90/"}]},{"title":"数据流聚类算法比较并用于文本主题挖掘","slug":"数据流聚类算法比较并用于文本主题挖掘","date":"2019-09-01T10:51:46.000Z","updated":"2019-09-09T14:58:11.958Z","comments":true,"path":"2019/09/01/数据流聚类算法比较并用于文本主题挖掘/","link":"","permalink":"http://raina-fighting.github.io/2019/09/01/%E6%95%B0%E6%8D%AE%E6%B5%81%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%83%E5%B9%B6%E7%94%A8%E4%BA%8E%E6%96%87%E6%9C%AC%E4%B8%BB%E9%A2%98%E6%8C%96%E6%8E%98/","excerpt":"","text":"数据流聚类算法比较并用于文本主题挖掘 ## 分析提要 数据流的聚类要求能实时计算，对聚类变化进行跟踪。Birch 算法是数据流中一个重要的层次聚类法，能够用一遍扫描有效地进行聚类。 通过模拟数据，对比 Birch 和 MiniBatchKMeans 算法，后者应用广泛，分批处理的技巧在大规模数据中很适用。模拟结果发现，二者的聚类精度相当，都能有效提高运算速度，在模拟数据上聚类效果都很好，且大批量数据集上 MiniBatchKMeans 聚类较快。 进行实证分析，使用 YouTube 网站每日热门视频榜单1，特别关注娱乐类视频的标题内容，找到其中用户关心的主题。Birch 算法实现对标题文本向量化矩阵的聚类，选择提取了 20 个事件类，结合 lda挖掘的主题，可以有很好的解释。 1234567891011121314151617181920212223242526272829303132333435'''加载模块'''import numpy as npimport osimport pandas as pdimport matplotlib.pyplot as pltimport matplotlib.colors as colorsimport warningsfrom scipy import sparsefrom math import sqrtfrom time import timefrom sklearn.metrics import silhouette_scorefrom sklearn.cluster import MiniBatchKMeans, KMeans, Birchfrom sklearn.metrics import confusion_matrix,classification_reportfrom sklearn.metrics.cluster import v_measure_score, homogeneity_score, completeness_scorefrom sklearn.cluster import Birchfrom sklearn.decomposition import LatentDirichletAllocationfrom sklearn.feature_extraction.text import CountVectorizerfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizerfrom sklearn.decomposition import TruncatedSVDfrom sklearn.manifold import TSNEfrom textblob import TextBlobimport jsonimport seaborn as snsfrom collections import Counterfrom nltk.tokenize import RegexpTokenizerfrom stop_words import get_stop_words #!对比nltk的停词表import refrom wordcloud import WordCloudimport nltkfrom nltk.corpus import stopwordsfrom nltk import sent_tokenize, word_tokenizefrom wordcloud import WordCloud, STOPWORDSimport pyLDAvisimport pyLDAvis.sklearnimport heapq 一、模拟数据12345678910111213141516171819202122232425### 生成高斯分布数据np.random.seed(2020)num = 200# 标准圆形mean = [10,10]cov = [[1,0], [0,1]] x1,y1 = np.random.multivariate_normal(mean,cov,num).Tplt.plot(x1,y1,'o',color='green',alpha=0.35)# 椭圆，椭圆的轴向与坐标平行mean = [2,10]cov = [[0.5,0], [0,3]] x2,y2 = np.random.multivariate_normal(mean,cov,num).Tplt.plot(x2,y2,'o',color='red',alpha=0.35)# 椭圆，但是椭圆的轴与坐标轴不一定平行mean = [5,5]cov = [[1,2.3], [2.3,1.4]] x3,y3 = np.random.multivariate_normal(mean,cov,num).Tplt.plot(x3,y3,'o',color='blue',alpha=0.35)X = np.concatenate((x1,x2,x3)).reshape(-1,1)Y = np.concatenate((y1,y2,y3)).reshape(-1,1)data = np.hstack((X, Y))plt.show() 12345label=np.concatenate((np.ones(200)*1,np.ones(200)*2,np.ones(200)*3)).reshape(-1,1)data = np.hstack((data,label))data.shapedatapre=pd.DataFrame(data,columns=['x','y','label'])data_withlabel=datapre[['x','y']] （一）MiniBatchKMeans12345678910111213141516171819rango_clusters = range(2,7)error_clusters = []sil_scores = []for num_clusters in rango_clusters: clusters = MiniBatchKMeans(num_clusters) clusters.fit(data_withlabel) error_clusters.append(clusters.inertia_) sil_score = silhouette_score(data_withlabel,clusters.labels_) sil_scores.append(sil_score) #从2类开始计算clusters_df = pd.DataFrame(&#123;\"num_clusters\":rango_clusters,\"error_clusters\":error_clusters&#125;)plt.plot(clusters_df.num_clusters,clusters_df.error_clusters,marker =\"o\")plt.xlabel('Kmeans Clusters')plt.ylabel('Error')plt.show()clusters_sil = pd.DataFrame(&#123;\"num_clusters\":rango_clusters,\"sil_clusters\":sil_scores&#125;)plt.plot(clusters_sil.num_clusters,clusters_sil.sil_clusters,marker =\"o\")plt.xlabel('Kmeans Clusters')plt.ylabel('Silhouette')plt.show() 外部度量–两种比较聚类效果的指标 轮廓系数越大越好；baseline 0.5 组内误差越小越好 123456'''选择类别数为3'''t=time()kmeans1 = MiniBatchKMeans(n_clusters=3, init='k-means++', n_init=1, max_iter=100, tol=0.0,verbose=0, random_state=None, batch_size=100)kY = kmeans1.fit_predict(data_withlabel)time_=time()-tprint(time_) 0.021027326583862305 12345678kmeans1.labels_[kmeans1.labels_==1]=3kmeans1.labels_[kmeans1.labels_==0]=1f, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 8))ax1.scatter(datapre.x,datapre.y, c=kY, cmap = \"jet\", edgecolor = \"None\", alpha=0.35)ax1.set_title('Clusters por k - means')ax2.scatter(datapre.x,datapre.y, c=datapre.label, cmap = \"jet\", edgecolor = \"None\", alpha=0.35)ax2.set_title('Clusters Actuales')plt.show() 1234'''输出混淆矩阵和聚类中心'''print(confusion_matrix(datapre.label,kmeans1.labels_))print(classification_report(datapre.label,kmeans1.labels_))kmeans1.cluster_centers_ [[200 0 0] [ 0 190 10] [ 11 0 189]] precision recall f1-score support 1.0 0.95 1.00 0.97 200 2.0 1.00 0.95 0.97 200 3.0 0.95 0.94 0.95 200 avg / total 0.97 0.96 0.96 600 ​ array([[ 9.59338454, 9.7092478 ], [ 1.94123116, 10.39578717], [ 4.59653775, 5.07769715]]) 聚类标签与原始标签对比 准确率为0.98，600个样本13个分错 第一类的召回率最高，达到100% 第二类与第三类有少数预测错误的 （二）Bitch一种无监督的数据挖掘算法，用于创建特别是在非常大的数据集上的分层集群。一种有效的内存算法，可以在线学习，作为MiniBatchKMeans的替代方案。 12345678910111213141516171819202122232425262728num_clusters = range(2,7)v_measure = []b_measure = []for num in num_clusters: kmeans_model = MiniBatchKMeans(n_clusters=num,init='k-means++', n_init=1, max_iter=100, tol=0.0, verbose=0, random_state=None, batch_size=100) kmeans = kmeans_model.fit(data_withlabel) kmeans_clusters = kmeans.predict(data_withlabel) #kmeans_distances = kmeans.transform(vec_matrix) b_model = Birch(n_clusters=int(num)) b = b_model.fit(data_withlabel) b_clusters = b.predict(data_withlabel) v_measure.append(v_measure_score(datapre.label, kmeans_clusters)) b_measure.append(v_measure_score(datapre.label, b_clusters)) fig = plt.figure(figsize=(15, 5))plt.axvline(3, color='blue', linestyle=\"dashed\")plt.axvline(3, color='red', linestyle=\"dashed\")plt.title('Choosing the optimal number of Clusters')plt.xlabel('Number of Clusters')plt.ylabel('V-measure')plt.grid(True)plt.plot(num_clusters, v_measure, label=\"K-Means\", color=\"blue\")plt.plot(num_clusters, b_measure, label=\"BIRCH\", color=\"red\")plt.legend(loc='best')plt.show() 已知类别的内部度量 v = (1 + beta) * (homogeneity * completeness) / (beta * homogeneity + completeness) homogeneity同质性度量；每一个聚出的类仅包含一个类别的程度度量。如果聚类结果的所有聚类仅包含属于单个类的数据点，则聚类结果满足同质性。这个度量独立于标签的绝对值:类别或聚类标签值的排列不会以任何方式改变分值。 completeness完备性度量；给定基本事实的聚类标记的完备性度量。如果属于给定类的所有数据点都是同一聚类的元素，则聚类结果满足完整性。这个度量独立于标签的绝对值:类别或聚类标签值的排列不会以任何方式改变分值。https://scikit-learn.org/stable/modules/generated/sklearn.metrics.v_measure_score.html#sklearn.metrics.v_measure_score 12345678910111213rango_clusters = range(2,7)sil_scores = []for num_clusters in rango_clusters: clusters = Birch(n_clusters=num_clusters) clusters.fit(data_withlabel) sil_score = silhouette_score(data_withlabel,clusters.labels_) sil_scores.append(sil_score) #从2类开始计算 clusters_sil = pd.DataFrame(&#123;\"num_clusters\":rango_clusters,\"sil_clusters\":sil_scores&#125;)plt.plot(clusters_sil.num_clusters,clusters_sil.sil_clusters,marker =\"o\")plt.xlabel('Birch Clusters')plt.ylabel('Silhouette')plt.show() 123birch1 = Birch(n_clusters=3)bY = birch1.fit_predict(data_withlabel)bY[bY==0]=3 1234567f, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(12, 8))ax1.scatter(datapre.x,datapre.y, c=bY, cmap = \"jet\", edgecolor = \"None\", alpha=0.35)ax1.set_title('Clusters por birch')ax2.scatter(datapre.x,datapre.y, c=datapre.label, cmap = \"jet\", edgecolor = \"None\", alpha=0.35)ax2.set_title('Clusters Actuales')plt.show() 123'''输出混淆矩阵'''print(confusion_matrix(datapre.label,bY))print(classification_report(datapre.label,bY)) [[200 0 0] [ 0 200 0] [ 20 4 176]] precision recall f1-score support 1.0 0.91 1.00 0.95 200 2.0 0.98 1.00 0.99 200 3.0 1.00 0.88 0.94 200 avg / total 0.96 0.96 0.96 600 ​ 聚类标签与原始标签对比 准确率为0.97，600个样本19个分错 第一类和第二类召回率均达到100% 第二类与第三类有少数预测错误的 123456'''调整参数'''birch2 = Birch(n_clusters=3, branching_factor=10, threshold=0.5)bY = birch2.fit_predict(data_withlabel)bY[bY==0]=3print(confusion_matrix(datapre.label, bY))print(classification_report(datapre.label, bY)) [[200 0 0] [ 0 191 9] [ 5 0 195]] precision recall f1-score support 1.0 0.98 1.00 0.99 200 2.0 1.00 0.95 0.98 200 3.0 0.96 0.97 0.97 200 avg / total 0.98 0.98 0.98 600 ​ 12345'''调整参数，不规定类别数'''t=time()birch3= Birch(branching_factor=200, threshold=3,n_clusters=None)bY = birch3.fit_predict(data_withlabel)time()-t 0.02101612091064453 12345bY=bY+1print(confusion_matrix(datapre.label, bY))print(classification_report(datapre.label, bY))np.unique(birch3.labels_).sizebirch3.subcluster_centers_ [[200 0 0] [ 0 195 5] [ 13 1 186]] precision recall f1-score support 1.0 0.94 1.00 0.97 200 2.0 0.99 0.97 0.98 200 3.0 0.97 0.93 0.95 200 avg / total 0.97 0.97 0.97 600 ​ array([[8.86247657, 9.87152635], [1.97577796, 9.90506347], [4.93940824, 4.86512982]]) 注意参数：每个CF最大样本半径阈值；枝节点最大CF数 https://scikit-learn.org/stable/auto_examples/cluster/plot_birch_vs_minibatchkmeans.html#sphx-glr-auto-examples-cluster-plot-birch-vs-minibatchkmeans-py （三）多批次大批量数据聚类1234567891011121314151617181920212223242526### 生成高斯分布数据np.random.seed(2020)num = 10000# 标准圆形mean = [10,10]cov = [[1,0], [0,1]] x1,y1 = np.random.multivariate_normal(mean,cov,num).T# 椭圆，椭圆的轴向与坐标平行mean = [2,10]cov = [[0.5,0], [0,3]] x2,y2 = np.random.multivariate_normal(mean,cov,num).T# 椭圆，但是椭圆的轴与坐标轴不一定平行mean = [5,5]cov = [[1,2.3], [2.3,1.4]] x3,y3 = np.random.multivariate_normal(mean,cov,num).TX = np.concatenate((x1,x2,x3)).reshape(-1,1)Y = np.concatenate((y1,y2,y3)).reshape(-1,1)data = np.hstack((X, Y))label=np.concatenate((np.ones(num)*1,np.ones(num)*2,np.ones(num)*3)).reshape(-1,1)data = np.hstack((data,label))data.shapedatapre=pd.DataFrame(data,columns=['x','y','label'])data_withlabel=datapre[['x','y']] 12datapre=datapre.sample(frac=1)data_withlabel=datapre[['x','y']] 1234567891011### 选择类别数为3t=time()kmeans1 = MiniBatchKMeans(n_clusters=3, init='k-means++', n_init=1, max_iter=100, tol=0.0, verbose=0, random_state=None, batch_size=100)kY = kmeans1.fit_predict(data_withlabel)time_=time()-tprint('kmeans',time_)t=time()birch2 = Birch(n_clusters=3, branching_factor=200, threshold=3)bY = birch2.fit_predict(data_withlabel)time_=time()-tprint('birch',time_) kmeans 0.12408709526062012 birch 0.5316519737243652 1234k_score=v_measure_score(datapre.label, kY)b_score=v_measure_score(datapre.label, bY)print(\"kmeans_score\",k_score)print(\"birch_score\",b_score) kmeans_score 0.8990013481586817 birch_score 0.9012205641918879 12k_sil=silhouette_score(data_withlabel,kY)b_sil=silhouette_score(data_withlabel,bY) 二、实证分析—— YouTube网站Entertainment类视频内容挖掘1234os.chdir(\"F:\\\\2019春学习\\\\期末报告\\\\文本-丰\\\\US_videos\")df_usa = pd.read_csv(\"USvideos.csv\") #(18973, 16)df_usa_multiple_day_trend= df_usa.drop_duplicates(subset='video_id',keep='first',inplace=False)print('热门视频榜单保留第一次出现',df_usa_multiple_day_trend.shape[0]) 热门视频榜单保留第一次出现 4079 123456789101112131415bloblist_title=[]for row in df_usa_multiple_day_trend['title']: blob = TextBlob(row) bloblist_title.append((row,blob.sentiment.polarity, blob.sentiment.subjectivity)) df_usa_polarity_title = pd.DataFrame(bloblist_title, columns = ['sentence','sentiment','polarity'])def f_title(df_usa_polarity_title): if df_usa_polarity_title['sentiment'] &gt; 0: val = \"Positive\" elif df_usa_polarity_title['sentiment'] == 0: val = \"Neutral\" else: val = \"Negative\" return valdf_usa_polarity_title['Sentiment_Type'] = df_usa_polarity_title.apply(f_title, axis=1) 1234567id_to_category = &#123;&#125;with open(\"US_category_id.json\",\"r\") as f: id_data = json.load(f) for category in id_data[\"items\"]: id_to_category[category[\"id\"]] = category[\"snippet\"][\"title\"]df_usa_multiple_day_trend[\"category_id\"] = df_usa_multiple_day_trend[\"category_id\"].astype(str)df_usa_multiple_day_trend.insert(4, \"category\",df_usa_multiple_day_trend[\"category_id\"].map(id_to_category)) 123456789df_usa_polarity_title['category']=list(df_usa_multiple_day_trend['category'])df_usa_category_polar=df_usa_polarity_title[['category','Sentiment_Type','sentiment']].groupby(['category','Sentiment_Type']).count()a=df_usa_category_polar.ix[['Entertainment']]plt.figure(figsize=(10,10))sns.set_style(\"whitegrid\")ax = sns.barplot(x=a.index.levels[1],y=\"sentiment\", data=a)plt.ylabel(\"Count\")plt.title('Entertainment')plt.show() 1234567891011121314entertainment_title=df_usa_multiple_day_trend['title'].loc[df_usa_multiple_day_trend['category']=='Entertainment']a = entertainment_title.str.lower().str.cat(sep=' ') #转换为空格连接的文本串b = re.sub('[^A-Za-z]+', ' ', a) #只保留了英文字母--^从开头匹配；+号多个匹配stop_words = list(get_stop_words('en')) nltk_words = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now']#nltk.download(\"stopwords\") #！连接失败 http://www.nltk.org/nltk_data/ http://johnlaudun.org/20130126-nltk-stopwords/stop_words.extend(nltk_words)word_tokens = word_tokenize(b) #nltk分词!tokenizefiltered_word = [w for w in word_tokens if not w in stop_words] print(\"nltk分词后词语个数\",len(filtered_word))## 去掉长度小于等于2词语processed_word = [word for word in filtered_word if len(word) &gt; 2]print(\"处理过后词语个数\",len(processed_word))word_dist = nltk.FreqDist(processed_word) nltk分词后词语个数 6596 处理过后词语个数 6248 12345678def wc(data,bgcolor,title): plt.figure(figsize = (15,15)) wc = WordCloud(background_color = bgcolor, max_words = 1000, max_font_size = 50) wc.generate(' '.join(data)) plt.imshow(wc) plt.axis('off') plt.show()wc(processed_word,'black','Common Words' ) 1234567'''动态lda结果展示'''vectorizer_entertainment_title = CountVectorizer(min_df=5, max_df=0.9, stop_words='english', lowercase=True, token_pattern='[a-zA-Z\\-][a-zA-Z\\-]&#123;2,&#125;')entertainment_title_vectorized = vectorizer_entertainment_title.fit_transform(entertainment_title)lda_popular_entertainment_title_vectorized = LatentDirichletAllocation(n_topics=7, max_iter=5, learning_method='online')entertainment_title_vectorized_lda = lda_popular_entertainment_title_vectorized.fit_transform(entertainment_title_vectorized )dash = pyLDAvis.sklearn.prepare(lda_popular_entertainment_title_vectorized,entertainment_title_vectorized, vectorizer_entertainment_title, mds='tsne')pyLDAvis.show(dash) Birch视频标题内容聚类12vectorizer = TfidfVectorizer(min_df=0, analyzer='word', max_features=1000, ngram_range=(1,2),stop_words='english',token_pattern='[a-zA-Z\\-][a-zA-Z\\-]&#123;2,&#125;')vec_matrix = vectorizer.fit_transform(entertainment_title) 12svd = TruncatedSVD(n_components=50, random_state=0)svd_tfidf = svd.fit_transform(vec_matrix) 12tsne_model = TSNE(n_components=2, verbose=1, random_state=0, n_iter=500)tsne_tfidf = tsne_model.fit_transform(svd_tfidf) 12345678tsne_tfidf_df = pd.DataFrame(tsne_tfidf)tsne_tfidf_df.columns = ['x', 'y']tsne_tfidf_df['title'] = entertainment_titleplt.figure(1, figsize=(15, 10))plt.margins(0.05) # Optional, just adds 5% padding to the autoscalingplt.plot(tsne_tfidf_df.x, tsne_tfidf_df.y, marker='o', linestyle='')plt.legend()plt.show() TSNE，是一种概率技术，它在较小维度的嵌入空间中维护数据的局部结构，它在二维平面中生成数据的“投影”。 123456789101112131415'''调节参数：类别数'''rango_clusters = range(2,50)sil_scores = []for num_clusters in rango_clusters: clusters = Birch(n_clusters=int(num_clusters)) clusters.fit(vec_matrix) sil_score = silhouette_score(vec_matrix,clusters.predict(vec_matrix)) sil_scores.append(sil_score) #从2类开始计算 clusters_sil = pd.DataFrame(&#123;\"num_clusters\":rango_clusters,\"sil_clusters\":sil_scores&#125;)plt.plot(clusters_sil.num_clusters,clusters_sil.sil_clusters,marker =\"o\")plt.axvline(20, color='blue', linestyle=\"dashed\")plt.xlabel('Birch Clusters')plt.ylabel('Silhouette')plt.show() 123456789101112131415161718'''调节参数：保留特征数'''num_clusters = 20max_features = np.arange(400,2000,50)sil_scores = []for features in max_features: vectorizer = TfidfVectorizer(min_df=0, analyzer='word', max_features=features, ngram_range=(1,2),stop_words='english',token_pattern='[a-zA-Z\\-][a-zA-Z\\-]&#123;2,&#125;') vec_matrix = vectorizer.fit_transform(entertainment_title) clusters = Birch(n_clusters=int(num_clusters)) clusters.fit(vec_matrix) sil_score = silhouette_score(vec_matrix,clusters.predict(vec_matrix)) sil_scores.append(sil_score) clusters_sil = pd.DataFrame(&#123;\"num_clusters\":max_features,\"sil_clusters\":sil_scores&#125;)plt.plot(clusters_sil.num_clusters,clusters_sil.sil_clusters,marker =\"o\")plt.xlabel('Birch Clusters')plt.ylabel('Silhouette')plt.show() 123vectorizer = TfidfVectorizer(min_df=0, analyzer='word', ngram_range=(1,1),stop_words='english') #7292-2888vec_matrix = vectorizer.fit_transform(entertainment_title)len(vectorizer.get_feature_names()) 2888 1234567num_clusters = 20features = 500vectorizer = TfidfVectorizer(min_df=0, max_features=features, analyzer='word', ngram_range=(1,2), stop_words='english')vec_matrix = vectorizer.fit_transform(entertainment_title)ms_model = Birch(n_clusters=num_clusters)ms = ms_model.fit(vec_matrix)ms_clusters = ms.predict(vec_matrix) 123456tsne_model = TSNE(n_components=2, verbose=1, random_state=0, n_iter=500)tsne_lda = tsne_model.fit_transform(ms.transform(vec_matrix))ms_df = pd.DataFrame(tsne_lda, columns=['x', 'y'])ms_df['cluster'] = ms_clustersms_df['cluster'] = ms_df['cluster'].map(str)ms_df['title'] = entertainment_title 1234567891011121314151617sns.set_palette(sns.color_palette(\"hls\", num_clusters))groups = ms_df.groupby('cluster')fig, ax = plt.subplots(figsize=(15, 10))ax.margins(0.05)cluster_news = []for name, group in groups: min_dist = 100 min_ind = 0 for ind in group.index: if ms.transform(vec_matrix)[ind][int(name)] &lt; min_dist: min_dist = ms.transform(vec_matrix)[ind][int(name)] min_ind = ind cluster_news.append(entertainment_title.iloc[min_ind]) ax.plot(group.x, group.y, marker='o', linestyle='', label=name)ax.legend()plt.show() 123456789101112131415'''每一类的含义和频数统计'''name=vectorizer.get_feature_names()result=pd.DataFrame(list(vec_matrix.A),columns=name)result['category']=ms_clustersa=result.groupby(['category']).mean()num=[]title=[]for i in range(a.shape[0]): num.append(sum(a.loc[i]!=0)) aa=list(a.loc[i]) rank=list(map(aa.index, heapq.nlargest(20, aa))) title.append(' '.join(a.columns[rank]))a['not zero']=numa['count']=list(Counter(ms_clusters).values())a['title']=title 调节特征维度12345vectorizer = TfidfVectorizer(analyzer='word', ngram_range=(1,1), stop_words='english')vec_matrix = vectorizer.fit_transform(entertainment_title)ms_model = Birch(n_clusters=num_clusters)ms = ms_model.fit(vec_matrix)ms_clusters = ms.predict(vec_matrix) 123456789101112131415161718192021222324tsne_model = TSNE(n_components=2, verbose=1, random_state=0, n_iter=500)tsne_lda = tsne_model.fit_transform(ms.transform(vec_matrix))ms_df = pd.DataFrame(tsne_lda, columns=['x', 'y'])ms_df['cluster'] = ms_clustersms_df['cluster'] = ms_df['cluster'].map(str)ms_df['title'] = entertainment_titlesns.set_palette(sns.color_palette(\"hls\", num_clusters))groups = ms_df.groupby('cluster')fig, ax = plt.subplots(figsize=(15, 10))ax.margins(0.05) cluster_news = []for name, group in groups: min_dist = 100 min_ind = 0 for ind in group.index: if ms.transform(vec_matrix)[ind][int(name)] &lt; min_dist: min_dist = ms.transform(vec_matrix)[ind][int(name)] min_ind = ind cluster_news.append(entertainment_title.iloc[min_ind]) ax.plot(group.x, group.y, marker='o', linestyle='', label=name)ax.legend()plt.show() 123456789101112131415name=vectorizer.get_feature_names()result=pd.DataFrame(list(vec_matrix.A),columns=name)result['category']=ms_clustersa=result.groupby(['category']).mean()num=[]title=[]for i in range(a.shape[0]): num.append(sum(a.loc[i]!=0)) aa=list(a.loc[i]) rank=list(map(aa.index, heapq.nlargest(10, aa))) title.append(' '.join(a.columns[rank]))a['not zero']=numa['count']=list(ms_df['cluster'].value_counts().sort_index())a['title']=titlea[['title','count']] title count category 0 movie justice justice talk review studios pant... 41 1 new challenge wwhl stars ellen diy day 2017 li... 589 2 2017 voice amazon youtubers people movies jenn... 4 3 christmas trump melania doctor state state tre... 5 4 2018 globes globes awards grammys sag moments ... 24 5 season hd tour kardashians keeping trailer gra... 13 6 graham graham dornan dornan perfect mic drop p... 22 7 official trailer hd netflix mirror black seaso... 20 8 things searched searched wired stranger questi... 7 9 trailer official teaser hd world ready ocean p... 9 10 fear fear weird stuff box box box bearded cast... 13 11 logan paul suicide tmz video guy guy track don... 10 12 wars star jedi review movie cast opening luke ... 50 13 bowl super commercial 2018 puppy ad possible p... 19 14 snl franco kimmel james monologue jimmy natali... 25 15 kardashian kuwtk gender jenner kim khloe pregn... 29 16 cold open snl white house visit fox friends sa... 25 17 lip lip battle preview harmony fifth johnny jo... 35 18 live carpet red performance christmas story je... 11 19 ronan ronan plays close thr cast bird lady act... 45 1title #聚类个数变多 1234567891011121314151617181920[&#39;movie justice justice talk review studios panther marvel avengers star&#39;, &#39;new challenge wwhl stars ellen diy day 2017 life vs&#39;, &#39;2017 voice amazon youtubers people movies jennifer music youtube 10&#39;, &#39;christmas trump melania doctor state state tree donald thank capaldi&#39;, &#39;2018 globes globes awards grammys sag moments hillary clinton mamma&#39;, &#39;season hd tour kardashians keeping trailer grand episode fx ep&#39;, &#39;graham graham dornan dornan perfect mic drop pitch jason helen&#39;, &#39;official trailer hd netflix mirror black season sucks king date&#39;, &#39;things searched searched wired stranger questions answers cast answer lower&#39;, &#39;trailer official teaser hd world ready ocean paddington player theaters&#39;, &#39;fear fear weird stuff box box box bearded cast dragons&#39;, &#39;logan paul suicide tmz video guy guy track don diss&#39;, &#39;wars star jedi review movie cast opening luke spoiler john&#39;, &#39;bowl super commercial 2018 puppy ad possible possible devito danny&#39;, &#39;snl franco kimmel james monologue jimmy natalie tommy tommy chastain&#39;, &#39;kardashian kuwtk gender jenner kim khloe pregnancy baby kris family&#39;, &#39;cold open snl white house visit fox friends santa trimming&#39;, &#39;lip lip battle preview harmony fifth johnny johnny slays channels&#39;, &#39;live carpet red performance christmas story jedi wars cast star&#39;, &#39;ronan ronan plays close thr cast bird lady actresses director&#39;]","categories":[{"name":"数据流","slug":"数据流","permalink":"http://raina-fighting.github.io/categories/%E6%95%B0%E6%8D%AE%E6%B5%81/"},{"name":"聚类","slug":"数据流/聚类","permalink":"http://raina-fighting.github.io/categories/%E6%95%B0%E6%8D%AE%E6%B5%81/%E8%81%9A%E7%B1%BB/"}],"tags":[{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/tags/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"},{"name":"python","slug":"python","permalink":"http://raina-fighting.github.io/tags/python/"},{"name":"数据流","slug":"数据流","permalink":"http://raina-fighting.github.io/tags/%E6%95%B0%E6%8D%AE%E6%B5%81/"},{"name":"聚类","slug":"聚类","permalink":"http://raina-fighting.github.io/tags/%E8%81%9A%E7%B1%BB/"}]},{"title":"典型社交媒体下华为粉丝网络的社区发现和链路预测","slug":"典型社交媒体下华为粉丝网络的社区发现和链路预测","date":"2019-08-15T10:51:00.000Z","updated":"2019-09-10T08:23:04.891Z","comments":true,"path":"2019/08/15/典型社交媒体下华为粉丝网络的社区发现和链路预测/","link":"","permalink":"http://raina-fighting.github.io/2019/08/15/%E5%85%B8%E5%9E%8B%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93%E4%B8%8B%E5%8D%8E%E4%B8%BA%E7%B2%89%E4%B8%9D%E7%BD%91%E7%BB%9C%E7%9A%84%E7%A4%BE%E5%8C%BA%E5%8F%91%E7%8E%B0%E5%92%8C%E9%93%BE%E8%B7%AF%E9%A2%84%E6%B5%8B/","excerpt":"","text":"典型社交媒体下华为粉丝网络的社区发现和链路预测 分析提要 本案例使用的网络 1 是通过爬取社交媒体平台来收集的（即 Facebook，Twitter 和 Instagram 华为页面）。API 提取 Facebook 帖子，Twitter 推文和 Instagram 帖子和评论。这是每天使用社交媒体的人之间的通信网络。通信时相互的，所以在此简化成无向无权网络；数据均来源于相关华为页面，必然是会提及或关心华为的群体，在此姑且称之为华为粉丝网络。本案例主要分析了 Instagram 通信网络结构，其中含有 1000 个节点和 4933 个边，预先对全部数据构建了网络，发现网络是连通的，从不同的角度展示网络未发现直观的规律，最终决定随机抽取 100 个用户深入挖掘他们之间的关系。 华为粉丝网络描述统计网络邻接矩阵可以使用多种方式展示。如图一，上图为网络图，使用的布局是kamada kawai，每个节点为一个用户，每一条边表明连接的用户间进行了通信。随机选择的100个用户间关联不是很紧密，存在一些小的群体，可能形成社区。下图使用热力图表达网络，颜色深的表示用户间有连接，可以看到用户边的存在较为稀疏，没有用户可以直接跟有其他很多用户有关联。其中删除了节点度为0的点，保留71个节点56条边。 图1：instagram数据的网络图和热力图展示 下面从度分布、节点中心性、边介数和凝聚性四个方面分析该网络存在的特征。 （一）度分布 对于无向无权网络，节点的度表示与节点连接的边的个数，度越大，在某种意义上该节点越重要。由图2，度分布图可知，网络大部分节点的度很小，88.7%的节点的度小于等于2，可判断符合现实网络的无标度特性。 图2：度分布图 （二）节点中心性 节点中心性定义了网络中一个节点的重要性。节点中心性度量有：节点度中心性、边介数中心性以及特征向量中心性。其中，使用最为广泛的是节点度中心性，即与点相连的边的数量。边介数中心性指的是一个结点担任其它两个结点之间最短路的桥梁的次数。一个结点充当“中介”的次数越高，它的中介中心度就越大。特征向量中心性认为，拥有很多的邻居的节点并不能确保这个节点就是重要的，拥有更多重要的邻居才能提供更有力的信息。 图3展示了节点中心性指标计算的结果。边介数中心性和特征向量中心性选出的重要用户相似性较大，主要由本网络存在的一个明显较大的连通分支影响。度中心性选择的用户则覆盖到更多的连通分支范围。 图3：不同节点中心性指标衡量的网络图 （三）边介数 边介数定义为网络中所有最短路径中经过该边的路径的数目占最短路径总数的比例。图4黄色的粗线为边介数前10的边。可以看到，仍然存在于大的连通分支中，由此很有可能在社区发现中这个大的分支会被拆开。 图4：边介数大的边在网络中的位置 （四）凝聚性 团是一类完全子图，集合内所有节点都由边相互连接，因而是完全凝聚的节点子集。本网络不存在尺寸大于2的子图。 网络的密度为实际出现的边和可能的边的频数之比，形容网络的结构复杂程度，越大说明网络越复杂，说明网络越能聚类块；聚类系数是对全局聚集性的度量，定义为连通三元组闭合形成三角形的相对频率，可以衡量网络中关联性如何，值越大代表交互关系越大，说明网络越复杂，越能聚类。从表1可以看出，该网络的网络密度为0.023，边聚类系数为0，网络总体聚集性不是很高，每个人联系过的其他人不会再有联系，每个人只会从一个来源转载评论同一篇帖子。网络的平均长度为4.026，符合小世界现象。 表1：密度、连通性指标 选择Neur为中心点，进行扩散，所能到达的点和距离。一步以内的点有5个，最远可触及的需要6步，见图5，体现在信息传递中，扩散往往是由大规模普及凝聚到小支点渗透的过程。在网络通信中，往往是存在几个影响力较大的点独立同步扩散中，这些点在本文中更倾向于度中心性选择的点。 ​ 图5：以Neur为中心点的扩散路径及距离 华为粉丝网络社区发现本案例选择 GN 算法、随机游走、贪心算法和标签扩散算法实现华为粉丝网络的社区发现，其中 GN 算法是分裂算法，其他三者均是凝聚算法。GN 算法旨在最小化社区间连边的边介数；随机游走最大化社区间的流距离；贪心算法使用社区合并算法来快速搜索最大的模块度；标签扩散算法是每个节点取邻居中最流行的标签，达到迭代式收敛。 社区发现中 GN 算法和贪心算法探测到 16 个社区，基本上是一个连通分支一个社区，但本网络本身聚集性较差，基于凝聚思想的贪心算法要更快。模块度最低的是标签扩散算法，划分了更多的社区，对于本网络并不适用，且由于算法的随机性，每次划分的情况并不相同。 123456789101112131415161718192021222324252627layout(matrix(c(1,2,3,4),nr = 2, byrow = T))community_detection = list()set.seed(45)l=layout.kamada.kawai(g) #g为igraph类型网络system.time(ec &lt;- edge.betweenness.community(g,weight=E(g)$weight,directed=F))print(modularity(ec))plot(ec, g,main = paste(\"edge.betweenness \\n groups =\",length(ec),sep = \" \"),vertex.label=NA,vertex.size = 2,layout=l)community_detection$edge.betweenness = data.frame(len = length(ec),Q = modularity(ec))system.time(wc &lt;- walktrap.community(g,weights=E(g)$weight,step=4))#step代表游走步长，越大代表分类越粗糙，分类类别越小。默认为4.print(modularity(wc))plot(wc , g,main = paste(\"walktrap \\n groups =\",length(wc),sep = \" \"),vertex.label=NA,vertex.label=NA,vertex.size = 2,layout=l)community_detection$walktrap = data.frame(len = length(wc),Q = modularity(wc))system.time(fc &lt;- fastgreedy.community(g))# length(fc) #发现社团个数# sizes(fc) #每个社团包含的节点数print(modularity(fc))plot(fc, g,main = paste(\"fastgreedy \\n groups =\",length(fc),sep = \" \"),vertex.label=NA,vertex.label=NA,vertex.size = 2,layout=l)community_detection$fastgreedy = data.frame(len = length(fc),Q = modularity(fc))system.time(mc &lt;- multilevel.community(g))print(modularity(mc))plot(mc, g,main = paste(\"mulstilevel \\n groups =\",length(mc),sep = \" \"),vertex.label=NA,vertex.label=NA,vertex.size = 2,layout=l)community_detection$multilevel = data.frame(len = length(mc),Q = modularity(mc))","categories":[{"name":"社交网络","slug":"社交网络","permalink":"http://raina-fighting.github.io/categories/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"社交网络","slug":"社交网络","permalink":"http://raina-fighting.github.io/tags/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"},{"name":"R","slug":"R","permalink":"http://raina-fighting.github.io/tags/R/"},{"name":"社区发现","slug":"社区发现","permalink":"http://raina-fighting.github.io/tags/%E7%A4%BE%E5%8C%BA%E5%8F%91%E7%8E%B0/"},{"name":"可视化","slug":"可视化","permalink":"http://raina-fighting.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"}]},{"title":"flowers数据集分类挖掘","slug":"flowers数据集分类挖掘","date":"2019-08-12T10:51:00.000Z","updated":"2019-09-10T03:43:01.849Z","comments":true,"path":"2019/08/12/flowers数据集分类挖掘/","link":"","permalink":"http://raina-fighting.github.io/2019/08/12/flowers%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%86%E7%B1%BB%E6%8C%96%E6%8E%98/","excerpt":"","text":"flowers数据集分类挖掘 分析提要 数据集中含有daisy、dandelion、sunflowers三种类型花的图片，希望通过合适的算法进行分类。本案例中使用卷积神经网络（sequential依次添加各层、在原有网络结构上生成新的模型）方法，对flowers数据进行训练，并计算预测准确率。 数据集中包含三种花卉类型，各种花卉的色彩、场景的噪点较多，同种花卉大小不一、角度不同、颜色不同。 数据准备展示训练集图片1234567891011121314151617181920212223242526def plot_images_labels_prediction(images,labels,prediction,idx,num=10): fig = plt.gcf() fig.set_size_inches(12, 14) if num&gt;25: num=25 for i in range(0, num): ax=plt.subplot(5,5, 1+i) ax.imshow(images[idx],cmap='binary') title=str(i)+','+label_dict[labels[i]] if len(prediction)&gt;0: title+='=&gt;'+label_dict[prediction[i]] ax.set_title(title,fontsize=10) ax.set_xticks([]);ax.set_yticks([]) idx+=1 plt.show()label_dict=&#123;0:\"dsy\",1:\"ddl\",2:\"sfl\"&#125;for i in [\"dsy\",\"ddl\",\"sfl\"]: dire=[target +'train\\\\'+i+'\\\\'+ r for r in os.listdir(target + 'train/'+i)] img=[load_img(i) for i in dire] imgnew=[x.resize((128,128)) for x in img] x=[img_to_array(x) for x in imgnew] x_img_dsytrain=np.array(x,dtype=int) y_label_dsytrain=np.repeat(lk.index(i),x_img_dsytrain.shape[0]) plot_images_labels_prediction(x_img_dsytrain,y_label_dsytrain,[],0,num=5) 图片预处理1234567891011121314151617181920212223242526272829303132333435'''对文件夹内所有图片处理；生成经过数据提升/归一化后的数据'''# 图片尺寸img_width, img_height = 128, 128input_shape = (img_width, img_height, 3)train_data_dir = target + 'train'validation_data_dir = target + 'validation'# 生成变形图片train_pic_gen = ImageDataGenerator( rescale=1./255, # 对输入图片归一化到0-1区间 rotation_range=20, #随机旋转角度的范围 width_shift_range=0.2, #随机水平移动的范围 height_shift_range=0.2, #随机竖直移动的范围 shear_range=0.2, #裁剪程度 zoom_range=0.5, #随机局部放大的程度 horizontal_flip=True, # 水平翻转 fill_mode='nearest') #填充新像素方式# 测试集不做变形处理，只需要归一化。validation_pic_gen = ImageDataGenerator(rescale=1./255)#按文件夹生成训练集流和标签，binary：二分类；categorical：多分类train_flow = train_pic_gen.flow_from_directory( train_data_dir, target_size=(img_width, img_height), batch_size=32, #batch的数据的大小 class_mode='categorical')#按文件夹生成测试集流和标签validation_flow = validation_pic_gen.flow_from_directory( validation_data_dir, target_size=(img_width, img_height), batch_size=32, class_mode='categorical')#categorical 卷积神经网络（依次添加各层） 图像的特征提取：通过卷积层、池化层的处理，提取图像的特征 完全连接神经网络：包含平坦层、隐藏层、输出层 其中加入Dropout，可以在每次训练迭代时，随机地在神经网络结构中放弃部分神经元，以避免过度拟合 模型建立与预测123456789101112131415161718192021222324252627282930313233343536'''模型建立'''model1 = Sequential([Convolution2D(32, (3, 3), input_shape=input_shape, activation='relu',padding='same'),Dropout(0.25),MaxPooling2D(pool_size=(2, 2)),Convolution2D(64, (3, 3), activation='relu',padding='same'),Dropout(0.25),MaxPooling2D(pool_size=(2, 2)),Flatten(),Dense(64, activation='relu'),Dropout(0.25),Dense(3, activation='softmax'),])model1.summary()# 损失函数设置为二分类交叉熵model1.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])train2=model1.fit_generator( train_flow, steps_per_epoch=50, epochs=10, validation_data=validation_flow, validation_steps=10)def show_train_history(train_acc,test_acc): plt.plot(train2.history[train_acc]) plt.plot(train2.history[test_acc]) plt.title('Train History') plt.ylabel('Accuracy') #plt.xlabel('Epoch') plt.legend(['train', 'test'], loc='upper left') plt.show()show_train_history('acc','val_acc')show_train_history('loss','val_loss') 12345678'''模型预测'''prediction=model1.predict_generator(validation_flow,steps=1,verbose=1)predictionmax= np.argmax(prediction, axis=1)#预测准确率score=model1.evaluate_generator(validation_flow,steps=1,verbose=1)#查看混淆矩阵pd.crosstab(y_label,predictionmax, rownames=['label'],colnames=['predict']) 获取数据可留言笔者","categories":[{"name":"图像分类","slug":"图像分类","permalink":"http://raina-fighting.github.io/categories/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/"}],"tags":[{"name":"python","slug":"python","permalink":"http://raina-fighting.github.io/tags/python/"},{"name":"图像分类","slug":"图像分类","permalink":"http://raina-fighting.github.io/tags/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/"},{"name":"神经网络","slug":"神经网络","permalink":"http://raina-fighting.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"}]},{"title":"中文文本处理","slug":"中文文本处理","date":"2019-08-10T10:51:00.000Z","updated":"2019-09-09T15:53:11.797Z","comments":true,"path":"2019/08/10/中文文本处理/","link":"","permalink":"http://raina-fighting.github.io/2019/08/10/%E4%B8%AD%E6%96%87%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/","excerpt":"","text":"中文文本处理 本研究系同学共同成果，此部分仅限分词代码 结巴模块分词训练1234567891011121314151617import jieba'''jieba加载词典'''jieba.load_userdict(\"userdict.txt\") # 添加自定义用户词典，确保一些专有名词不会被错分，注意要修改为UTF-8编码格式'''加载停用词表'''stop = open(r'stopwords.txt', encoding='UTF-8') # 加载自定义的停用词表，删去一些虚词、助词、标点符号以及对分析任务没有实质性贡献的频繁出现的词（例如数据）[1]content = stop.read()stopwords = re.split('\\n',content)'''jieba分词'''def jieba_get_cut(data): seg_list = list(jieba.cut(data.lower(),cut_all = False)) seg_list_nolinebreak = [i for i in seg_list if i != '\\n' and i != ' '] after_delect_stopwords = [i for i in seg_list_nolinebreak if (i not in stopwords) | len(i) &gt;=2 ] after_delect_num = [] for i in after_delect_stopwords: after_delect_num.append(re.sub('[a-zA-Z0-9]', \"\", i)) after_delect_num = [i for i in after_delect_num if i is not ''] return after_delect_num 补充：加载搜狗细胞词库为自定义用户词典 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091'''从github上找到的将搜狗的scel细胞词库文件转换成txt词典的程序 [2] '''import structimport os# 拼音表偏移，startPy = 0x1540;# 汉语词组表偏移startChinese = 0x2628;# 全局拼音表GPy_Table = &#123;&#125;# 解析结果# 元组(词频,拼音,中文词组)的列表GTable = []# 原始字节码转为字符串def byte2str(data): pos = 0 str = '' while pos &lt; len(data): c = chr(struct.unpack('H', bytes([data[pos], data[pos + 1]]))[0]) if c != chr(0): str += c pos += 2 return str# 获取拼音表def getPyTable(data): data = data[4:] pos = 0 while pos &lt; len(data): index = struct.unpack('H', bytes([data[pos],data[pos + 1]]))[0] pos += 2 lenPy = struct.unpack('H', bytes([data[pos], data[pos + 1]]))[0] pos += 2 py = byte2str(data[pos:pos + lenPy]) GPy_Table[index] = py pos += lenPy# 获取一个词组的拼音def getWordPy(data): pos = 0 ret = '' while pos &lt; len(data): index = struct.unpack('H', bytes([data[pos], data[pos + 1]]))[0] ret += GPy_Table[index] pos += 2 return ret# 读取中文表def getChinese(data): pos = 0 while pos &lt; len(data): # 同音词数量 same = struct.unpack('H', bytes([data[pos], data[pos + 1]]))[0] # 拼音索引表长度 pos += 2 py_table_len = struct.unpack('H', bytes([data[pos], data[pos + 1]]))[0] # 拼音索引表 pos += 2 py = getWordPy(data[pos: pos + py_table_len]) # 中文词组 pos += py_table_len for i in range(same): # 中文词组长度 c_len = struct.unpack('H', bytes([data[pos], data[pos + 1]]))[0] # 中文词组 pos += 2 word = byte2str(data[pos: pos + c_len]) # 扩展数据长度 pos += c_len ext_len = struct.unpack('H', bytes([data[pos], data[pos + 1]]))[0] # 词频 pos += 2 count = struct.unpack('H', bytes([data[pos], data[pos + 1]]))[0] # 保存 GTable.append((count, py, word)) # 到下个词的偏移位置 pos += ext_lendef scel2txt(file_name): # 分隔符 print('-' * 60) # 读取文件 with open(file_name, 'rb') as f: data = f.read() print(\"词库名：\", byte2str(data[0x130:0x338])) # .encode('GB18030') print(\"词库类型：\", byte2str(data[0x338:0x540])) print(\"描述信息：\", byte2str(data[0x540:0xd40])) print(\"词库示例：\", byte2str(data[0xd40:startPy])) getPyTable(data[startPy:startChinese]) getChinese(data[startChinese:])'''举例调用函数'''scel2txt(\"IT计算机.scel\") f = open('./it_dict.txt', 'w',encoding='utf-8')for count, py, word in GTable: f.write( word + '\\n') #选择词汇写入utf-8的txtf.close() [2]: https://blog.csdn.net/cqdiy/article/details/82840027 “”转载自博文作者寒江共血””","categories":[{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/categories/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"}],"tags":[{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/tags/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"},{"name":"分词","slug":"分词","permalink":"http://raina-fighting.github.io/tags/%E5%88%86%E8%AF%8D/"},{"name":"python","slug":"python","permalink":"http://raina-fighting.github.io/tags/python/"}]},{"title":"YouTube网站的视频营销分析","slug":"YouTube网站的视频营销分析","date":"2019-08-08T10:51:46.000Z","updated":"2019-09-09T09:43:24.516Z","comments":true,"path":"2019/08/08/YouTube网站的视频营销分析/","link":"","permalink":"http://raina-fighting.github.io/2019/08/08/YouTube%E7%BD%91%E7%AB%99%E7%9A%84%E8%A7%86%E9%A2%91%E8%90%A5%E9%94%80%E5%88%86%E6%9E%90/","excerpt":"","text":"基于YouTube网站的视频营销分析 ## 一、背景介绍与数据描述 热门YouTube视频 + YouTube[2]（世界著名的视频分享网站）维护着该平台上热门视频的列表。 根据Variety杂志的报道，“为了确定年度最热门的视频，YouTube使用了多种因素，包括衡量用户互动（观看次数，分享，评论和喜欢）。 请注意，它们不是整个日历年中观看次数最多的视频”。 + 数据描述YouTube热门视频的每日记录[1]。包括美国、英国、德国、加拿大和法国（US，GB，DE，CA，FR）五个区域，每天最多可列出200个热门视频。 + 每个区域的数据都在一个单独的文件中，数据字段包括视频标题、频道标题、发布时间、标签、观看次数、喜欢和不喜欢次数、评论次数和描述。数据还包括类别id，该字段在不同区域之间变化。 要检索特定视频的类别，需要在关联的JSON中找到它。 + 本文对美国区域YouTube视频观看进行深入分析 [1]: https://www.kaggle.com/datasnaek/youtube-new/data \"通过YouTube API获取\" [2]: https://github.com/DataSnaek/Trending-YouTube-Scraper 分析思路 1. 影响力分析--随时间的统计分析 2. 情感分析 3. 主题分析 4. YouTube视频分类（待完善） 5. 影响受欢迎程度的因素（待完善） 二、描述分析123456import pandas as pdimport numpy as npimport seaborn as snsimport matplotlib.pyplot as plt%matplotlib inlineimport os 1df_usa = pd.read_csv(\"USvideos.csv\") #(18973, 16) 12345### 统一数据格式df_usa['trending_date'] = pd.to_datetime(df_usa['trending_date'], format='%y.%d.%m')df_usa['publish_time'] = pd.to_datetime(df_usa['publish_time'], format='%Y-%m-%dT%H:%M:%S.%fZ')df_usa.insert(5, 'publish_date', df_usa['publish_time'].dt.date)df_usa['publish_time'] = df_usa['publish_time'].dt.time 12### 查看缺失df_usa.isnull().sum()/df_usa.shape[0] 1234### 数据描述分析df_usa.describe()df_usa.describe(include=[np.object])df_usa.describe(include=[np.bool]) 1print(df_usa['video_error_or_removed'].loc[df_usa['video_id']=='kZete48ZtsY']) 14822 False 15061 False 15258 False 15499 True 15755 True 15980 True Name: video_error_or_removed, dtype: bool 大多数视频不会存在[评论禁用][评级禁用][视频错误]的问题，少数视频可能如此，而甚少的视频在作为热门视频期间会发生状态的变化，如video id为kZete48ZtsY的视频在最后三天无法观看 1234df_usa_single_day_trend=df_usa.drop_duplicates(subset='video_id', keep=False, inplace=False)df_usa_multiple_day_trend= df_usa.drop_duplicates(subset='video_id',keep='first',inplace=False)print('出现在热门视频榜单一次',df_usa_single_day_trend.shape[0])print('热门视频榜单保留第一次出现',df_usa_multiple_day_trend.shape[0]) 出现在热门视频榜单一次 544 热门视频榜单保留第一次出现 4079 12### 首次上榜出现[评论禁用][评级禁用][视频错误]的视频print(df_usa_multiple_day_trend.describe(include=[np.bool])) comments_disabled ratings_disabled video_error_or_removed count 4079 4079 4079 unique 2 2 2 top False False False freq 4015 4059 4078 1234567### 观看次数、喜欢和不喜欢次数、评论次数columns_show = ['views', 'likes', 'dislikes', 'comment_count']f, ax = plt.subplots(figsize=(8, 8))corr = df_usa[columns_show].corr()sns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True), square=True, ax=ax,annot=True) #np.zeros_like构造一个新矩阵，矩阵的大小同corrplt.show() 观看次数、喜欢和不喜欢次数、评论次数相关性 评论数与不喜欢次数有较高的正相关，观众对不喜欢的视频会更多得表达自己的意见 观看次数与喜欢次数有较高的正相关，在观看前会进行选择，还是倾向选择符合个人爱好的视频 总体来看，四个字段都具有一些程度的正相关，往往比较热门的视频受众广泛，被观看得多，点赞与否定的也多，评论也多 三、影响力分析（一）热门视频时间趋势12345date_count=df_usa.groupby(['trending_date'])['trending_date'].agg('count')print('天数',len(date_count))print('起始日期',date_count[0:1])print('结束日期',date_count[-1:])### 缺少1-10和1-11的数据 天数 95 起始日期 trending_date 2017-11-14 200 Name: trending_date, dtype: int64 结束日期 trending_date 2018-02-18 200 Name: trending_date, dtype: int64 1234publish_hour=[0]*24for i in df_usa_multiple_day_trend.index: temp=df_usa_multiple_day_trend['publish_time'].loc[i] publish_hour[temp.hour]+=1 1234567plt.figure(figsize=(9,9))sns.set_style(\"whitegrid\")ax=sns.barplot(x=np.arange(24),y=publish_hour)plt.xlabel(\"Publish_hour\")plt.ylabel(\"Count\")plt.title(\"Best time to publish vide\")plt.show() D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): （二）热门视频发布天数连续出现在热门视频榜单天数123df_usa_video_trend_maximum=df_usa.groupby(by=['video_id'],as_index=False).count().sort_values(by='trending_date',ascending=False)df_usa_video_trend_maximum['trending_date'].value_counts().plot.bar()plt.xticks(rotation=0) (array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), &lt;a list of 14 Text xticklabel objects&gt;) 12345678df_usa_video_trend_maximum=df_usa.groupby(by=['video_id'],as_index=False).count().sort_values(by='trending_date',ascending=False).head()plt.figure(figsize=(10,10))sns.set_style(\"whitegrid\")ax=sns.barplot(x='video_id',y='trending_date',data=df_usa_video_trend_maximum)plt.xlabel(\"Video Id\")plt.ylabel(\"Count\")plt.title(\"Top 5 Videos that trended maximum days in USA\")plt.show() 123df_usa['publish_date']=pd.to_datetime(df_usa['publish_date']) #np.datetime64df_usa['trending_date']=pd.to_datetime(df_usa['trending_date'])df_usa_multiple_day_trend= df_usa.drop_duplicates(subset='video_id',keep='first',inplace=False) 123df_usa_multiple_day_trend['Days_taken']=1for i in df_usa_multiple_day_trend.index: df_usa_multiple_day_trend['Days_taken'].loc[i]=(df_usa_multiple_day_trend['trending_date'].loc[i]- df_usa_multiple_day_trend['publish_date'].loc[i])/ np.timedelta64(1, 'D') 从发布到成为热门视频需要天数12345678910usa_days=df_usa_multiple_day_trend.sort_values(by='Days_taken',ascending=False).head(5)plt.figure(figsize=(10,10))sns.set_style(\"whitegrid\")ax = sns.barplot(x='title',y='Days_taken', data=usa_days)plt.xlabel(\"Video Title\")plt.ylabel(\"No. of Days\")plt.title(\"Maximum no. of days taken by 5 videos to be popular in USA\")plt.xticks(rotation=10)plt.show()print(usa_days[['video_id','Days_taken']]) D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): video_id Days_taken 16294 MJO3FmmFuh4 4215.0 10710 UQtt9I6c-YM 3563.0 2311 wFEAoF7RC7Y 3448.0 2553 Y8JGfi4MJ8k 3398.0 1136 rO_mAQC9bv0 3176.0 12df_usa_multiple_day_trend['Days_taken'].value_counts().plot.hist()plt.xticks(rotation=0) (array([-250., 0., 250., 500., 750., 1000., 1250., 1500., 1750., 2000.]), &lt;a list of 10 Text xticklabel objects&gt;) 1df_usa.loc[df_usa['video_id']=='MJO3FmmFuh4'] Budweiser百威啤酒广告 whazzup Wassup? Whassup? There is still no consensus on how to spell this. –Budweiser adland1 1df_usa['description'][16294] &#39;Original Whazzup ad - however, there is a little *glitch* in the middle...sorry.&#39; 12345678### 发布当天成为热门视频个数usa_days=df_usa_multiple_day_trend.sort_values(by='Days_taken',ascending=True)count=0for i in usa_days.index: count=count+1 if usa_days['Days_taken'].loc[i]&gt;0: breakprint('发布当天成为热门视频个数',count) 发布当天成为热门视频个数 105 （三）热门视频TOP频道12345678910usa_trending_channel=df_usa_multiple_day_trend.groupby(by=['channel_title'],as_index=False).count().sort_values(by='video_id',ascending=False).head()#len(np.unique(df_usa_multiple_day_trend['channel_title'])) 1796plt.figure(figsize=(10,10))sns.set_style(\"whitegrid\")ax = sns.barplot(x='channel_title',y='video_id', data=usa_trending_channel)plt.xlabel(\"Channel Title\")plt.ylabel(\"Count\")plt.title(\"Top 5 Trending Channel in USA\")plt.show()print(usa_trending_channel[['channel_title','video_id']]) D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): channel_title video_id 1449 The Tonight Show Starring Jimmy Fallon 42 1194 Refinery29 39 1464 TheEllenShow 38 714 Jimmy Kimmel Live 36 1028 Netflix 36 1234567891011df_channel=df_usa_multiple_day_trend[['channel_title','comment_count']]df_channel_comment=df_channel.groupby(['channel_title']).mean().sort_values(by='comment_count',ascending=False).head()df_channel_commentplt.figure(figsize=(10,10))sns.set_style(\"whitegrid\")ax = sns.barplot(x=df_channel_comment.index,y='comment_count', data=df_channel_comment)plt.xlabel(\"Channel Title\")plt.ylabel(\"Count\")plt.title(\"Top 5 Trending Channel in USA\")plt.show()print(df_channel_comment[['comment_count']]) D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): comment_count channel_title Logan Paul Vlogs 416049.75 ibighit 233969.00 YouTube Spotlight 233550.50 The ACE Family 179396.00 Collins Key 116532.00 （四）热门视频TOP类别123456789import jsonid_to_category = &#123;&#125;with open(\"US_category_id.json\",\"r\") as f: id_data = json.load(f) for category in id_data[\"items\"]: id_to_category[category[\"id\"]] = category[\"snippet\"][\"title\"]id_to_category {&#39;1&#39;: &#39;Film &amp; Animation&#39;, &#39;10&#39;: &#39;Music&#39;, &#39;15&#39;: &#39;Pets &amp; Animals&#39;, &#39;17&#39;: &#39;Sports&#39;, &#39;18&#39;: &#39;Short Movies&#39;, &#39;19&#39;: &#39;Travel &amp; Events&#39;, &#39;2&#39;: &#39;Autos &amp; Vehicles&#39;, &#39;20&#39;: &#39;Gaming&#39;, &#39;21&#39;: &#39;Videoblogging&#39;, &#39;22&#39;: &#39;People &amp; Blogs&#39;, &#39;23&#39;: &#39;Comedy&#39;, &#39;24&#39;: &#39;Entertainment&#39;, &#39;25&#39;: &#39;News &amp; Politics&#39;, &#39;26&#39;: &#39;Howto &amp; Style&#39;, &#39;27&#39;: &#39;Education&#39;, &#39;28&#39;: &#39;Science &amp; Technology&#39;, &#39;29&#39;: &#39;Nonprofits &amp; Activism&#39;, &#39;30&#39;: &#39;Movies&#39;, &#39;31&#39;: &#39;Anime/Animation&#39;, &#39;32&#39;: &#39;Action/Adventure&#39;, &#39;33&#39;: &#39;Classics&#39;, &#39;34&#39;: &#39;Comedy&#39;, &#39;35&#39;: &#39;Documentary&#39;, &#39;36&#39;: &#39;Drama&#39;, &#39;37&#39;: &#39;Family&#39;, &#39;38&#39;: &#39;Foreign&#39;, &#39;39&#39;: &#39;Horror&#39;, &#39;40&#39;: &#39;Sci-Fi/Fantasy&#39;, &#39;41&#39;: &#39;Thriller&#39;, &#39;42&#39;: &#39;Shorts&#39;, &#39;43&#39;: &#39;Shows&#39;, &#39;44&#39;: &#39;Trailers&#39;} 12df_usa_multiple_day_trend[\"category_id\"] = df_usa_multiple_day_trend[\"category_id\"].astype(str)df_usa_multiple_day_trend.insert(4, \"category\",df_usa_multiple_day_trend[\"category_id\"].map(id_to_category)) D:\\jupyter\\lib\\site-packages\\ipykernel\\__main__.py:1: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame. Try using .loc[row_indexer,col_indexer] = value instead See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy if __name__ == &#39;__main__&#39;: 12345678910usa_category_id=df_usa_multiple_day_trend.groupby(by=['category'],as_index=False).count().sort_values(by='video_id',ascending=False).head()plt.figure(figsize=(7,7))#sns.kdeplot(usa_category_id['category_id']);sns.set_style(\"whitegrid\")ax = sns.barplot(x='category',y='video_id', data=usa_category_id)plt.xlabel(\"Category\")plt.ylabel(\"Count\")plt.title(\"Top 5 Category IDs for USA\")plt.show()print(usa_category_id[['category','video_id']]) D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): category video_id 3 Entertainment 996 7 Music 523 8 News &amp; Politics 395 6 Howto &amp; Style 372 1 Comedy 346 123df_category=df_usa_multiple_day_trend[['category','likes','dislikes']]df_category_iflike=df_category.groupby(['category']).mean()df_category_top=df_category_iflike.loc[['Entertainment','Music','News &amp; Politics','Howto &amp; Style','Comedy']] 12345df_category_top.plot()plt.xlabel(\"Category\")plt.ylabel(\"Count\")plt.title(\"Mean likes or dislikes of Top 5 Category\")plt.show() 四、情感分析12345678910from collections import Counterfrom nltk.tokenize import RegexpTokenizerfrom stop_words import get_stop_words #!对比nltk的停词表import refrom wordcloud import WordCloudimport nltkfrom nltk.corpus import stopwordsfrom nltk import sent_tokenize, word_tokenizefrom wordcloud import WordCloud, STOPWORDS 1234567891011121314### 统计标题词频a = df_usa['title'].str.lower().str.cat(sep=' ') #转换为空格连接的文本串b = re.sub('[^A-Za-z]+', ' ', a) #只保留了英文字母--^从开头匹配；+号多个匹配stop_words = list(get_stop_words('en')) nltk_words = ['i', 'me', 'my', 'myself', 'we', 'our', 'ours', 'ourselves', 'you', 'your', 'yours', 'yourself', 'yourselves', 'he', 'him', 'his', 'himself', 'she', 'her', 'hers', 'herself', 'it', 'its', 'itself', 'they', 'them', 'their', 'theirs', 'themselves', 'what', 'which', 'who', 'whom', 'this', 'that', 'these', 'those', 'am', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'having', 'do', 'does', 'did', 'doing', 'a', 'an', 'the', 'and', 'but', 'if', 'or', 'because', 'as', 'until', 'while', 'of', 'at', 'by', 'for', 'with', 'about', 'against', 'between', 'into', 'through', 'during', 'before', 'after', 'above', 'below', 'to', 'from', 'up', 'down', 'in', 'out', 'on', 'off', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don', 'should', 'now']#nltk.download(\"stopwords\") #！连接失败 http://www.nltk.org/nltk_data/ http://johnlaudun.org/20130126-nltk-stopwords/stop_words.extend(nltk_words)word_tokens = word_tokenize(b) #nltk分词!tokenizefiltered_word = [w for w in word_tokens if not w in stop_words] print(\"nltk分词后词语个数\",len(filtered_word))## 去掉长度小于等于2词语processed_word = [word for word in filtered_word if len(word) &gt; 2]print(\"处理过后词语个数\",len(processed_word))word_dist = nltk.FreqDist(processed_word) nltk分词后词语个数 114272 处理过后词语个数 108729 12345678topn=100rslt = pd.DataFrame(word_dist.most_common(topn), columns=['Word', 'Frequency'])plt.figure(figsize=(10,10))sns.set_style(\"whitegrid\")ax = sns.barplot(x=\"Word\",y=\"Frequency\", data=rslt.head(5))plt.show() 12345678### 词云图def wc(data,bgcolor,title): plt.figure(figsize = (15,15)) wc = WordCloud(background_color = bgcolor, max_words = 1000, max_font_size = 50) wc.generate(' '.join(data)) plt.imshow(wc) plt.axis('off')wc(processed_word,'black','Common Words' ) 12from textblob import TextBlob#https://planspace.org/20150607-textblob_sentiment/ 计算公式 1234567891011121314151617bloblist_title=[]for row in df_usa_multiple_day_trend['title']: blob = TextBlob(row) bloblist_title.append((row,blob.sentiment.polarity, blob.sentiment.subjectivity)) df_usa_polarity_title = pd.DataFrame(bloblist_title, columns = ['sentence','sentiment','polarity'])def f_title(df_usa_polarity_title): if df_usa_polarity_title['sentiment'] &gt; 0: val = \"Positive\" elif df_usa_polarity_title['sentiment'] == 0: val = \"Neutral\" else: val = \"Negative\" return valdf_usa_polarity_title['Sentiment_Type'] = df_usa_polarity_title.apply(f_title, axis=1) #df_usa_polarity_title.loc[14]['sentiment'] 1df_usa_polarity_title['category']=list(df_usa_multiple_day_trend['category']) 123456a=df_usa_polarity_title[['Sentiment_Type','sentiment']].groupby('Sentiment_Type').count()plt.figure(figsize=(10,10))sns.set_style(\"whitegrid\")ax = sns.barplot(x=a.index,y=\"sentiment\", data=a)plt.ylabel(\"Count\")plt.show() D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): 分类别视频情感分析1df_usa_category_polar=df_usa_polarity_title[['category','Sentiment_Type','sentiment']].groupby(['category','Sentiment_Type']).count() 1df_usa_category_polar.plot.bar() &lt;matplotlib.axes._subplots.AxesSubplot at 0x1f60e7d1080&gt; 123456789for i in ['Entertainment','Music','News &amp; Politics','Howto &amp; Style','Comedy']: a=df_usa_category_polar.ix[[i]] print(a) plt.figure(figsize=(10,10)) sns.set_style(\"whitegrid\") ax = sns.barplot(x=a.index.levels[1],y=\"sentiment\", data=a) plt.ylabel(\"Count\") plt.title(i) plt.show() sentiment category Sentiment_Type Entertainment Negative 139 Neutral 559 Positive 298 D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): sentiment category Sentiment_Type Music Negative 54 Neutral 308 Positive 161 D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): sentiment category Sentiment_Type News &amp; Politics Negative 76 Neutral 230 Positive 89 D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): sentiment category Sentiment_Type Howto &amp; Style Negative 50 Neutral 205 Positive 117 D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): sentiment category Sentiment_Type Comedy Negative 51 Neutral 205 Positive 90 D:\\jupyter\\lib\\site-packages\\seaborn\\categorical.py:342: DeprecationWarning: pandas.core.common.is_categorical_dtype is deprecated. import from the public API: pandas.api.types.is_categorical_dtype instead elif is_categorical(y): 五、主题探测1234from sklearn.decomposition import LatentDirichletAllocationfrom sklearn.feature_extraction.text import CountVectorizer import pyLDAvisimport pyLDAvis.sklearn 12345entertainment_title= df_usa_multiple_day_trend[\"title\"][(df_usa_multiple_day_trend['category'] == 'Entertainment')] music_title= df_usa_multiple_day_trend[\"title\"][(df_usa_multiple_day_trend['category'] == 'Music')] news_politics_title= df_usa_multiple_day_trend[\"title\"][(df_usa_multiple_day_trend['category'] == 'News &amp; Politics')] style_title= df_usa_multiple_day_trend[\"title\"][(df_usa_multiple_day_trend['category'] == 'Howto &amp; Style')] comedy_title= df_usa_multiple_day_trend[\"title\"][(df_usa_multiple_day_trend['category'] == 'Comedy')] 12345678vectorizer_entertainment_title = CountVectorizer(min_df=5, max_df=0.9, stop_words='english', lowercase=True, token_pattern='[a-zA-Z\\-][a-zA-Z\\-]&#123;2,&#125;')#token_patternentertainment_title_vectorized = vectorizer_entertainment_title.fit_transform(entertainment_title)lda_popular_entertainment_title_vectorized = LatentDirichletAllocation(n_topics=7, max_iter=5, learning_method='online')entertainment_title_vectorized_lda = lda_popular_entertainment_title_vectorized.fit_transform(entertainment_title_vectorized )dash = pyLDAvis.sklearn.prepare(lda_popular_entertainment_title_vectorized,entertainment_title_vectorized, vectorizer_entertainment_title, mds='tsne')pyLDAvis.show(dash) ​ 12345678vectorizer_music_title = CountVectorizer(min_df=5, max_df=0.9, stop_words='english', lowercase=True, token_pattern='[a-zA-Z\\-][a-zA-Z\\-]&#123;2,&#125;')music_title_vectorized = vectorizer_music_title.fit_transform(music_title)lda_music_title_vectorized= LatentDirichletAllocation(n_topics=6, max_iter=5, learning_method='online')music_title_vectorized_lda = lda_music_title_vectorized.fit_transform(music_title_vectorized )dash = pyLDAvis.sklearn.prepare(lda_music_title_vectorized,music_title_vectorized, vectorizer_music_title , mds='tsne')pyLDAvis.show(dash) ​ 1234567vectorizer_news_politics_title = CountVectorizer(min_df=5, max_df=0.9, stop_words='english', lowercase=True, token_pattern='[a-zA-Z\\-][a-zA-Z\\-]&#123;2,&#125;')news_politics_title_vectorized = vectorizer_news_politics_title.fit_transform(news_politics_title)lda_news_politics_title_vectorized= LatentDirichletAllocation(n_topics=7, max_iter=5, learning_method='online',verbose=True)news_politics_title_vectorized_lda = lda_news_politics_title_vectorized.fit_transform(news_politics_title_vectorized )dash = pyLDAvis.sklearn.prepare(lda_news_politics_title_vectorized,news_politics_title_vectorized, vectorizer_news_politics_title , mds='tsne')pyLDAvis.show(dash) ​ 1234567vectorizer_style_title = CountVectorizer(min_df=5, max_df=0.9, stop_words='english', lowercase=True, token_pattern='[a-zA-Z\\-][a-zA-Z\\-]&#123;2,&#125;')style_title_vectorized = vectorizer_style_title.fit_transform(style_title)lda_style_title_vectorized= LatentDirichletAllocation(n_topics=7, max_iter=5, learning_method='online',verbose=True)style_title_vectorized_lda = lda_style_title_vectorized.fit_transform(style_title_vectorized )dash = pyLDAvis.sklearn.prepare(lda_style_title_vectorized,style_title_vectorized, vectorizer_style_title , mds='tsne')pyLDAvis.show(dash) ​ 1234567vectorizer_comedy_title = CountVectorizer(min_df=5, max_df=0.9, stop_words='english', lowercase=True, token_pattern='[a-zA-Z\\-][a-zA-Z\\-]&#123;2,&#125;')comedy_title_vectorized = vectorizer_comedy_title.fit_transform(comedy_title)lda_comedy_title_vectorized= LatentDirichletAllocation(n_topics=7, max_iter=5, learning_method='online',verbose=True)comedy_title_vectorized_lda = lda_comedy_title_vectorized.fit_transform(comedy_title_vectorized )dash = pyLDAvis.sklearn.prepare(lda_comedy_title_vectorized,comedy_title_vectorized, vectorizer_comedy_title , mds='tsne')pyLDAvis.show(dash) ​","categories":[{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/categories/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"},{"name":"话题挖掘","slug":"文本分析/话题挖掘","permalink":"http://raina-fighting.github.io/categories/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/%E8%AF%9D%E9%A2%98%E6%8C%96%E6%8E%98/"}],"tags":[{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/tags/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"},{"name":"python","slug":"python","permalink":"http://raina-fighting.github.io/tags/python/"},{"name":"话题挖掘","slug":"话题挖掘","permalink":"http://raina-fighting.github.io/tags/%E8%AF%9D%E9%A2%98%E6%8C%96%E6%8E%98/"},{"name":"情感分析","slug":"情感分析","permalink":"http://raina-fighting.github.io/tags/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"}]},{"title":"hello-hexo","slug":"hello-hexo","date":"2019-04-03T10:09:58.000Z","updated":"2019-08-08T08:54:27.384Z","comments":true,"path":"2019/04/03/hello-hexo/","link":"","permalink":"http://raina-fighting.github.io/2019/04/03/hello-hexo/","excerpt":"","text":"Hello,Hexo.Hello,April.","categories":[],"tags":[]}],"categories":[{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/categories/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"},{"name":"爬虫","slug":"文本分析/爬虫","permalink":"http://raina-fighting.github.io/categories/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/%E7%88%AC%E8%99%AB/"},{"name":"结构化数据","slug":"结构化数据","permalink":"http://raina-fighting.github.io/categories/%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/"},{"name":"数据流","slug":"数据流","permalink":"http://raina-fighting.github.io/categories/%E6%95%B0%E6%8D%AE%E6%B5%81/"},{"name":"聚类","slug":"数据流/聚类","permalink":"http://raina-fighting.github.io/categories/%E6%95%B0%E6%8D%AE%E6%B5%81/%E8%81%9A%E7%B1%BB/"},{"name":"社交网络","slug":"社交网络","permalink":"http://raina-fighting.github.io/categories/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"},{"name":"图像分类","slug":"图像分类","permalink":"http://raina-fighting.github.io/categories/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/"},{"name":"话题挖掘","slug":"文本分析/话题挖掘","permalink":"http://raina-fighting.github.io/categories/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/%E8%AF%9D%E9%A2%98%E6%8C%96%E6%8E%98/"}],"tags":[{"name":"python","slug":"python","permalink":"http://raina-fighting.github.io/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"http://raina-fighting.github.io/tags/%E7%88%AC%E8%99%AB/"},{"name":"文本分析","slug":"文本分析","permalink":"http://raina-fighting.github.io/tags/%E6%96%87%E6%9C%AC%E5%88%86%E6%9E%90/"},{"name":"可视化","slug":"可视化","permalink":"http://raina-fighting.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"},{"name":"R","slug":"R","permalink":"http://raina-fighting.github.io/tags/R/"},{"name":"回归分析","slug":"回归分析","permalink":"http://raina-fighting.github.io/tags/%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"},{"name":"因子分析","slug":"因子分析","permalink":"http://raina-fighting.github.io/tags/%E5%9B%A0%E5%AD%90%E5%88%86%E6%9E%90/"},{"name":"数据流","slug":"数据流","permalink":"http://raina-fighting.github.io/tags/%E6%95%B0%E6%8D%AE%E6%B5%81/"},{"name":"聚类","slug":"聚类","permalink":"http://raina-fighting.github.io/tags/%E8%81%9A%E7%B1%BB/"},{"name":"社交网络","slug":"社交网络","permalink":"http://raina-fighting.github.io/tags/%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"},{"name":"社区发现","slug":"社区发现","permalink":"http://raina-fighting.github.io/tags/%E7%A4%BE%E5%8C%BA%E5%8F%91%E7%8E%B0/"},{"name":"图像分类","slug":"图像分类","permalink":"http://raina-fighting.github.io/tags/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB/"},{"name":"神经网络","slug":"神经网络","permalink":"http://raina-fighting.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"},{"name":"分词","slug":"分词","permalink":"http://raina-fighting.github.io/tags/%E5%88%86%E8%AF%8D/"},{"name":"话题挖掘","slug":"话题挖掘","permalink":"http://raina-fighting.github.io/tags/%E8%AF%9D%E9%A2%98%E6%8C%96%E6%8E%98/"},{"name":"情感分析","slug":"情感分析","permalink":"http://raina-fighting.github.io/tags/%E6%83%85%E6%84%9F%E5%88%86%E6%9E%90/"}]}